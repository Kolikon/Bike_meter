
miernik.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001018  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00001090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .eeprom       00000004  00810000  00810000  0000108c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .comment      00000030  00000000  00000000  00001090  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000010c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00001100  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000124d  00000000  00000000  000011e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000069c  00000000  00000000  0000242d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b8f  00000000  00000000  00002ac9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  00003658  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000426  00000000  00000000  000036f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b95  00000000  00000000  00003b1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000046af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	95 c0       	rjmp	.+298    	; 0x12c <__ctors_end>
       2:	9c c0       	rjmp	.+312    	; 0x13c <__bad_interrupt>
       4:	9b c0       	rjmp	.+310    	; 0x13c <__bad_interrupt>
       6:	9a c0       	rjmp	.+308    	; 0x13c <__bad_interrupt>
       8:	99 c0       	rjmp	.+306    	; 0x13c <__bad_interrupt>
       a:	98 c0       	rjmp	.+304    	; 0x13c <__bad_interrupt>
       c:	97 c0       	rjmp	.+302    	; 0x13c <__bad_interrupt>
       e:	96 c0       	rjmp	.+300    	; 0x13c <__bad_interrupt>
      10:	95 c0       	rjmp	.+298    	; 0x13c <__bad_interrupt>
      12:	94 c0       	rjmp	.+296    	; 0x13c <__bad_interrupt>
      14:	93 c0       	rjmp	.+294    	; 0x13c <__bad_interrupt>
      16:	92 c0       	rjmp	.+292    	; 0x13c <__bad_interrupt>
      18:	91 c0       	rjmp	.+290    	; 0x13c <__bad_interrupt>
      1a:	90 c0       	rjmp	.+288    	; 0x13c <__bad_interrupt>
      1c:	8f c0       	rjmp	.+286    	; 0x13c <__bad_interrupt>
      1e:	8e c0       	rjmp	.+284    	; 0x13c <__bad_interrupt>
      20:	8d c0       	rjmp	.+282    	; 0x13c <__bad_interrupt>
      22:	8c c0       	rjmp	.+280    	; 0x13c <__bad_interrupt>
      24:	8b c0       	rjmp	.+278    	; 0x13c <__bad_interrupt>
      26:	94 c0       	rjmp	.+296    	; 0x150 <cyfra+0x12>
      28:	96 c0       	rjmp	.+300    	; 0x156 <cyfra+0x18>
      2a:	98 c0       	rjmp	.+304    	; 0x15c <cyfra+0x1e>
      2c:	9a c0       	rjmp	.+308    	; 0x162 <cyfra+0x24>
      2e:	9c c0       	rjmp	.+312    	; 0x168 <cyfra+0x2a>
      30:	9e c0       	rjmp	.+316    	; 0x16e <cyfra+0x30>
      32:	a0 c0       	rjmp	.+320    	; 0x174 <cyfra+0x36>
      34:	a2 c0       	rjmp	.+324    	; 0x17a <cyfra+0x3c>
      36:	a4 c0       	rjmp	.+328    	; 0x180 <cyfra+0x42>
      38:	a6 c0       	rjmp	.+332    	; 0x186 <cyfra+0x48>
      3a:	a8 c0       	rjmp	.+336    	; 0x18c <cyfra+0x4e>
      3c:	aa c0       	rjmp	.+340    	; 0x192 <cyfra+0x54>
      3e:	ac c0       	rjmp	.+344    	; 0x198 <cyfra+0x5a>
      40:	ae c0       	rjmp	.+348    	; 0x19e <cyfra+0x60>
      42:	b0 c0       	rjmp	.+352    	; 0x1a4 <cyfra+0x66>
      44:	b2 c0       	rjmp	.+356    	; 0x1aa <cyfra+0x6c>
      46:	b4 c0       	rjmp	.+360    	; 0x1b0 <cyfra+0x72>
      48:	b6 c0       	rjmp	.+364    	; 0x1b6 <cyfra+0x78>
      4a:	b8 c0       	rjmp	.+368    	; 0x1bc <cyfra+0x7e>
      4c:	ba c0       	rjmp	.+372    	; 0x1c2 <cyfra+0x84>
      4e:	bc c0       	rjmp	.+376    	; 0x1c8 <cyfra+0x8a>
      50:	d0 c0       	rjmp	.+416    	; 0x1f2 <cyfra+0xb4>
      52:	cf c0       	rjmp	.+414    	; 0x1f2 <cyfra+0xb4>
      54:	bc c0       	rjmp	.+376    	; 0x1ce <cyfra+0x90>
      56:	cd c0       	rjmp	.+410    	; 0x1f2 <cyfra+0xb4>
      58:	bd c0       	rjmp	.+378    	; 0x1d4 <cyfra+0x96>
      5a:	bf c0       	rjmp	.+382    	; 0x1da <cyfra+0x9c>
      5c:	ca c0       	rjmp	.+404    	; 0x1f2 <cyfra+0xb4>
      5e:	c0 c0       	rjmp	.+384    	; 0x1e0 <cyfra+0xa2>
      60:	c8 c0       	rjmp	.+400    	; 0x1f2 <cyfra+0xb4>
      62:	c1 c0       	rjmp	.+386    	; 0x1e6 <cyfra+0xa8>
      64:	c6 c0       	rjmp	.+396    	; 0x1f2 <cyfra+0xb4>
      66:	c2 c0       	rjmp	.+388    	; 0x1ec <cyfra+0xae>
      68:	9c c2       	rjmp	.+1336   	; 0x5a2 <__stack+0x143>
      6a:	13 c3       	rjmp	.+1574   	; 0x692 <__stack+0x233>
      6c:	74 c3       	rjmp	.+1768   	; 0x756 <__stack+0x2f7>
      6e:	d5 c3       	rjmp	.+1962   	; 0x81a <__stack+0x3bb>
      70:	02 c4       	rjmp	.+2052   	; 0x876 <__stack+0x417>
      72:	7d c4       	rjmp	.+2298   	; 0x96e <__stack+0x50f>
      74:	f1 c4       	rjmp	.+2530   	; 0xa58 <__stack+0x5f9>
      76:	58 c5       	rjmp	.+2736   	; 0xb28 <__stack+0x6c9>
      78:	57 c5       	rjmp	.+2734   	; 0xb28 <__stack+0x6c9>
      7a:	56 c5       	rjmp	.+2732   	; 0xb28 <__stack+0x6c9>
      7c:	55 c5       	rjmp	.+2730   	; 0xb28 <__stack+0x6c9>
      7e:	54 c5       	rjmp	.+2728   	; 0xb28 <__stack+0x6c9>
      80:	53 c5       	rjmp	.+2726   	; 0xb28 <__stack+0x6c9>
      82:	52 c5       	rjmp	.+2724   	; 0xb28 <__stack+0x6c9>
      84:	51 c5       	rjmp	.+2722   	; 0xb28 <__stack+0x6c9>
      86:	50 c5       	rjmp	.+2720   	; 0xb28 <__stack+0x6c9>
      88:	4f c5       	rjmp	.+2718   	; 0xb28 <__stack+0x6c9>
      8a:	4e c5       	rjmp	.+2716   	; 0xb28 <__stack+0x6c9>
      8c:	4d c5       	rjmp	.+2714   	; 0xb28 <__stack+0x6c9>
      8e:	4c c5       	rjmp	.+2712   	; 0xb28 <__stack+0x6c9>
      90:	4b c5       	rjmp	.+2710   	; 0xb28 <__stack+0x6c9>
      92:	4a c5       	rjmp	.+2708   	; 0xb28 <__stack+0x6c9>
      94:	49 c5       	rjmp	.+2706   	; 0xb28 <__stack+0x6c9>
      96:	48 c5       	rjmp	.+2704   	; 0xb28 <__stack+0x6c9>
      98:	47 c5       	rjmp	.+2702   	; 0xb28 <__stack+0x6c9>
      9a:	46 c5       	rjmp	.+2700   	; 0xb28 <__stack+0x6c9>
      9c:	45 c5       	rjmp	.+2698   	; 0xb28 <__stack+0x6c9>
      9e:	44 c5       	rjmp	.+2696   	; 0xb28 <__stack+0x6c9>
      a0:	43 c5       	rjmp	.+2694   	; 0xb28 <__stack+0x6c9>
      a2:	42 c5       	rjmp	.+2692   	; 0xb28 <__stack+0x6c9>
      a4:	41 c5       	rjmp	.+2690   	; 0xb28 <__stack+0x6c9>
      a6:	40 c5       	rjmp	.+2688   	; 0xb28 <__stack+0x6c9>
      a8:	3f c5       	rjmp	.+2686   	; 0xb28 <__stack+0x6c9>
      aa:	3e c5       	rjmp	.+2684   	; 0xb28 <__stack+0x6c9>
      ac:	3d c5       	rjmp	.+2682   	; 0xb28 <__stack+0x6c9>
      ae:	3c c5       	rjmp	.+2680   	; 0xb28 <__stack+0x6c9>
      b0:	3b c5       	rjmp	.+2678   	; 0xb28 <__stack+0x6c9>
      b2:	3a c5       	rjmp	.+2676   	; 0xb28 <__stack+0x6c9>
      b4:	39 c5       	rjmp	.+2674   	; 0xb28 <__stack+0x6c9>
      b6:	38 c5       	rjmp	.+2672   	; 0xb28 <__stack+0x6c9>
      b8:	37 c5       	rjmp	.+2670   	; 0xb28 <__stack+0x6c9>
      ba:	36 c5       	rjmp	.+2668   	; 0xb28 <__stack+0x6c9>
      bc:	35 c5       	rjmp	.+2666   	; 0xb28 <__stack+0x6c9>
      be:	34 c5       	rjmp	.+2664   	; 0xb28 <__stack+0x6c9>
      c0:	33 c5       	rjmp	.+2662   	; 0xb28 <__stack+0x6c9>
      c2:	32 c5       	rjmp	.+2660   	; 0xb28 <__stack+0x6c9>
      c4:	31 c5       	rjmp	.+2658   	; 0xb28 <__stack+0x6c9>
      c6:	30 c5       	rjmp	.+2656   	; 0xb28 <__stack+0x6c9>
      c8:	2a c5       	rjmp	.+2644   	; 0xb1e <__stack+0x6bf>
      ca:	66 c2       	rjmp	.+1228   	; 0x598 <__stack+0x139>
      cc:	e4 c2       	rjmp	.+1480   	; 0x696 <__stack+0x237>
      ce:	45 c3       	rjmp	.+1674   	; 0x75a <__stack+0x2fb>
      d0:	a6 c3       	rjmp	.+1868   	; 0x81e <__stack+0x3bf>
      d2:	d3 c3       	rjmp	.+1958   	; 0x87a <__stack+0x41b>
      d4:	4e c4       	rjmp	.+2204   	; 0x972 <__stack+0x513>
      d6:	c2 c4       	rjmp	.+2436   	; 0xa5c <__stack+0x5fd>
      d8:	29 c5       	rjmp	.+2642   	; 0xb2c <__stack+0x6cd>
      da:	28 c5       	rjmp	.+2640   	; 0xb2c <__stack+0x6cd>
      dc:	27 c5       	rjmp	.+2638   	; 0xb2c <__stack+0x6cd>
      de:	26 c5       	rjmp	.+2636   	; 0xb2c <__stack+0x6cd>
      e0:	25 c5       	rjmp	.+2634   	; 0xb2c <__stack+0x6cd>
      e2:	24 c5       	rjmp	.+2632   	; 0xb2c <__stack+0x6cd>
      e4:	23 c5       	rjmp	.+2630   	; 0xb2c <__stack+0x6cd>
      e6:	22 c5       	rjmp	.+2628   	; 0xb2c <__stack+0x6cd>
      e8:	21 c5       	rjmp	.+2626   	; 0xb2c <__stack+0x6cd>
      ea:	20 c5       	rjmp	.+2624   	; 0xb2c <__stack+0x6cd>
      ec:	1f c5       	rjmp	.+2622   	; 0xb2c <__stack+0x6cd>
      ee:	1e c5       	rjmp	.+2620   	; 0xb2c <__stack+0x6cd>
      f0:	1d c5       	rjmp	.+2618   	; 0xb2c <__stack+0x6cd>
      f2:	1c c5       	rjmp	.+2616   	; 0xb2c <__stack+0x6cd>
      f4:	1b c5       	rjmp	.+2614   	; 0xb2c <__stack+0x6cd>
      f6:	1a c5       	rjmp	.+2612   	; 0xb2c <__stack+0x6cd>
      f8:	19 c5       	rjmp	.+2610   	; 0xb2c <__stack+0x6cd>
      fa:	18 c5       	rjmp	.+2608   	; 0xb2c <__stack+0x6cd>
      fc:	17 c5       	rjmp	.+2606   	; 0xb2c <__stack+0x6cd>
      fe:	16 c5       	rjmp	.+2604   	; 0xb2c <__stack+0x6cd>
     100:	15 c5       	rjmp	.+2602   	; 0xb2c <__stack+0x6cd>
     102:	14 c5       	rjmp	.+2600   	; 0xb2c <__stack+0x6cd>
     104:	13 c5       	rjmp	.+2598   	; 0xb2c <__stack+0x6cd>
     106:	12 c5       	rjmp	.+2596   	; 0xb2c <__stack+0x6cd>
     108:	11 c5       	rjmp	.+2594   	; 0xb2c <__stack+0x6cd>
     10a:	10 c5       	rjmp	.+2592   	; 0xb2c <__stack+0x6cd>
     10c:	0f c5       	rjmp	.+2590   	; 0xb2c <__stack+0x6cd>
     10e:	0e c5       	rjmp	.+2588   	; 0xb2c <__stack+0x6cd>
     110:	0d c5       	rjmp	.+2586   	; 0xb2c <__stack+0x6cd>
     112:	0c c5       	rjmp	.+2584   	; 0xb2c <__stack+0x6cd>
     114:	0b c5       	rjmp	.+2582   	; 0xb2c <__stack+0x6cd>
     116:	0a c5       	rjmp	.+2580   	; 0xb2c <__stack+0x6cd>
     118:	09 c5       	rjmp	.+2578   	; 0xb2c <__stack+0x6cd>
     11a:	08 c5       	rjmp	.+2576   	; 0xb2c <__stack+0x6cd>
     11c:	07 c5       	rjmp	.+2574   	; 0xb2c <__stack+0x6cd>
     11e:	06 c5       	rjmp	.+2572   	; 0xb2c <__stack+0x6cd>
     120:	05 c5       	rjmp	.+2570   	; 0xb2c <__stack+0x6cd>
     122:	04 c5       	rjmp	.+2568   	; 0xb2c <__stack+0x6cd>
     124:	03 c5       	rjmp	.+2566   	; 0xb2c <__stack+0x6cd>
     126:	02 c5       	rjmp	.+2564   	; 0xb2c <__stack+0x6cd>
     128:	01 c5       	rjmp	.+2562   	; 0xb2c <__stack+0x6cd>
     12a:	fb c4       	rjmp	.+2550   	; 0xb22 <__stack+0x6c3>

0000012c <__ctors_end>:
     12c:	11 24       	eor	r1, r1
     12e:	1f be       	out	0x3f, r1	; 63
     130:	cf e5       	ldi	r28, 0x5F	; 95
     132:	d4 e0       	ldi	r29, 0x04	; 4
     134:	de bf       	out	0x3e, r29	; 62
     136:	cd bf       	out	0x3d, r28	; 61
     138:	bb d0       	rcall	.+374    	; 0x2b0 <main>
     13a:	6c c7       	rjmp	.+3800   	; 0x1014 <_exit>

0000013c <__bad_interrupt>:
     13c:	61 cf       	rjmp	.-318    	; 0x0 <__vectors>

0000013e <cyfra>:
#include "util/delay.h"
#include <avr/eeprom.h>

void cyfra(unsigned char k)
{
	switch(k)
     13e:	90 e0       	ldi	r25, 0x00	; 0
     140:	81 32       	cpi	r24, 0x21	; 33
     142:	91 05       	cpc	r25, r1
     144:	08 f0       	brcs	.+2      	; 0x148 <cyfra+0xa>
     146:	55 c0       	rjmp	.+170    	; 0x1f2 <cyfra+0xb4>
     148:	fc 01       	movw	r30, r24
     14a:	ed 5e       	subi	r30, 0xED	; 237
     14c:	ff 4f       	sbci	r31, 0xFF	; 255
     14e:	09 94       	ijmp
	{
		case 0:
		{
			PORTD= 0b00000101;
     150:	85 e0       	ldi	r24, 0x05	; 5
     152:	82 bb       	out	0x12, r24	; 18
			break;
     154:	08 95       	ret
		}
		case 1:
		{
			PORTD= 0b11011101;
     156:	8d ed       	ldi	r24, 0xDD	; 221
     158:	82 bb       	out	0x12, r24	; 18
			break;
     15a:	08 95       	ret
		}
		case 2:
		{
			PORTD= 0b01000110;
     15c:	86 e4       	ldi	r24, 0x46	; 70
     15e:	82 bb       	out	0x12, r24	; 18
			break;
     160:	08 95       	ret
		}
		case 3:
		{
			PORTD= 0b01010100;
     162:	84 e5       	ldi	r24, 0x54	; 84
     164:	82 bb       	out	0x12, r24	; 18
			break;
     166:	08 95       	ret
		}
		case 4:
		{
			PORTD= 0b10011100;
     168:	8c e9       	ldi	r24, 0x9C	; 156
     16a:	82 bb       	out	0x12, r24	; 18
			break;
     16c:	08 95       	ret
		}
		case 5:
		{
			PORTD= 0b00110100;
     16e:	84 e3       	ldi	r24, 0x34	; 52
     170:	82 bb       	out	0x12, r24	; 18
			break;
     172:	08 95       	ret
		}
		case 6:
		{
			PORTD= 0b00100100;
     174:	84 e2       	ldi	r24, 0x24	; 36
     176:	82 bb       	out	0x12, r24	; 18
			break;
     178:	08 95       	ret
		}
		case 7:
		{
			PORTD= 0b01011101;
     17a:	8d e5       	ldi	r24, 0x5D	; 93
     17c:	82 bb       	out	0x12, r24	; 18
			break;
     17e:	08 95       	ret
		}
		case 8:
		{
			PORTD= 0b00000100;
     180:	84 e0       	ldi	r24, 0x04	; 4
     182:	82 bb       	out	0x12, r24	; 18
			break;
     184:	08 95       	ret
		}
		case 9:
		{
			PORTD= 0b00010100;
     186:	84 e1       	ldi	r24, 0x14	; 20
     188:	82 bb       	out	0x12, r24	; 18
			break;
     18a:	08 95       	ret
		}
		case 10:
		{
			PORTD= 0b11111011;
     18c:	8b ef       	ldi	r24, 0xFB	; 251
     18e:	82 bb       	out	0x12, r24	; 18
			break;
     190:	08 95       	ret
		}
		case 11: // A letter
		{
			PORTD= 0b00001100;
     192:	8c e0       	ldi	r24, 0x0C	; 12
     194:	82 bb       	out	0x12, r24	; 18
			break;
     196:	08 95       	ret
		}
		case 12: // b letter
		{
			PORTD= 0b10100100;
     198:	84 ea       	ldi	r24, 0xA4	; 164
     19a:	82 bb       	out	0x12, r24	; 18
			break;
     19c:	08 95       	ret
		}
		case 13: // C letter
		{
			PORTD= 0b00100111;
     19e:	87 e2       	ldi	r24, 0x27	; 39
     1a0:	82 bb       	out	0x12, r24	; 18
			break;
     1a2:	08 95       	ret
		}
		case 14: // d letter
		{
			PORTD= 0b11000100;
     1a4:	84 ec       	ldi	r24, 0xC4	; 196
     1a6:	82 bb       	out	0x12, r24	; 18
			break;
     1a8:	08 95       	ret
		}
		case 15: // E letter
		{
			PORTD= 0b00100110;
     1aa:	86 e2       	ldi	r24, 0x26	; 38
     1ac:	82 bb       	out	0x12, r24	; 18
			break;
     1ae:	08 95       	ret
		}
		case 16: // F letter
		{
			PORTD= 0b00101110;
     1b0:	8e e2       	ldi	r24, 0x2E	; 46
     1b2:	82 bb       	out	0x12, r24	; 18
			break;
     1b4:	08 95       	ret
		}
		case 17: // G letter
		{
			PORTD= 0b00100101;
     1b6:	85 e2       	ldi	r24, 0x25	; 37
     1b8:	82 bb       	out	0x12, r24	; 18
			break;
     1ba:	08 95       	ret
		}
		case 18: // H letter
		{
			PORTD= 0b10001100;
     1bc:	8c e8       	ldi	r24, 0x8C	; 140
     1be:	82 bb       	out	0x12, r24	; 18
			break;
     1c0:	08 95       	ret
		}
		case 19: // i letter
		{
			PORTD= 0b11111101;
     1c2:	8d ef       	ldi	r24, 0xFD	; 253
     1c4:	82 bb       	out	0x12, r24	; 18
			break;
     1c6:	08 95       	ret
		}
		case 20: // J letter
		{
			PORTD= 0b11010101;
     1c8:	85 ed       	ldi	r24, 0xD5	; 213
     1ca:	82 bb       	out	0x12, r24	; 18
			break;
     1cc:	08 95       	ret
		}
		case 23: // M letter
		{
			PORTD= 0b01101100;
     1ce:	8c e6       	ldi	r24, 0x6C	; 108
     1d0:	82 bb       	out	0x12, r24	; 18
			break;
     1d2:	08 95       	ret
		}
		case 25: // o letter
		{
			PORTD= 0b11100100;
     1d4:	84 ee       	ldi	r24, 0xE4	; 228
     1d6:	82 bb       	out	0x12, r24	; 18
			break;
     1d8:	08 95       	ret
		}
		case 26: // P letter
		{
			PORTD= 0b00001110;
     1da:	8e e0       	ldi	r24, 0x0E	; 14
     1dc:	82 bb       	out	0x12, r24	; 18
			break;
     1de:	08 95       	ret
		}
		case 28: // r letter
		{
			PORTD= 0b11101110;
     1e0:	8e ee       	ldi	r24, 0xEE	; 238
     1e2:	82 bb       	out	0x12, r24	; 18
			break;
     1e4:	08 95       	ret
		}
		case 30: // t letter
		{
			PORTD= 0b10100110;
     1e6:	86 ea       	ldi	r24, 0xA6	; 166
     1e8:	82 bb       	out	0x12, r24	; 18
			break;
     1ea:	08 95       	ret
		}
		case 32: // v letter
		{
			PORTD= 0b11100101;
     1ec:	85 ee       	ldi	r24, 0xE5	; 229
     1ee:	82 bb       	out	0x12, r24	; 18
			break;
     1f0:	08 95       	ret
		}
		default:
		{
			PORTD= 0xff;
     1f2:	8f ef       	ldi	r24, 0xFF	; 255
     1f4:	82 bb       	out	0x12, r24	; 18
     1f6:	08 95       	ret

000001f8 <numercyfry>:
	}
}

void numercyfry(unsigned char k)
{
	switch(k)
     1f8:	82 30       	cpi	r24, 0x02	; 2
     1fa:	61 f0       	breq	.+24     	; 0x214 <numercyfry+0x1c>
     1fc:	83 30       	cpi	r24, 0x03	; 3
     1fe:	91 f0       	breq	.+36     	; 0x224 <numercyfry+0x2c>
     200:	81 30       	cpi	r24, 0x01	; 1
     202:	c1 f4       	brne	.+48     	; 0x234 <numercyfry+0x3c>
	{
		case 1:
		{
			if((PINC & 32) == 0)
     204:	9d 99       	sbic	0x13, 5	; 19
     206:	03 c0       	rjmp	.+6      	; 0x20e <numercyfry+0x16>
			{
				PORTB= 0b00001001;
     208:	89 e0       	ldi	r24, 0x09	; 9
     20a:	88 bb       	out	0x18, r24	; 24
     20c:	08 95       	ret
			}
			else
			{
				PORTB= 0b00000001;;
     20e:	81 e0       	ldi	r24, 0x01	; 1
     210:	88 bb       	out	0x18, r24	; 24
     212:	08 95       	ret
			}
			break;
		}
		case 2:
		{
			if((PINC & 32) == 0)
     214:	9d 99       	sbic	0x13, 5	; 19
     216:	03 c0       	rjmp	.+6      	; 0x21e <numercyfry+0x26>
			{
				PORTB= 0b00001010;
     218:	8a e0       	ldi	r24, 0x0A	; 10
     21a:	88 bb       	out	0x18, r24	; 24
     21c:	08 95       	ret
			}
			else
			{
				PORTB= 0b00000010;;
     21e:	82 e0       	ldi	r24, 0x02	; 2
     220:	88 bb       	out	0x18, r24	; 24
     222:	08 95       	ret
			}
			break;
		}
		case 3:
		{
			if((PINC & 32) == 0)
     224:	9d 99       	sbic	0x13, 5	; 19
     226:	03 c0       	rjmp	.+6      	; 0x22e <numercyfry+0x36>
			{
				PORTB= 0b00001100;
     228:	8c e0       	ldi	r24, 0x0C	; 12
     22a:	88 bb       	out	0x18, r24	; 24
     22c:	08 95       	ret
			}
			else
			{
				PORTB= 0b00000100;;
     22e:	84 e0       	ldi	r24, 0x04	; 4
     230:	88 bb       	out	0x18, r24	; 24
     232:	08 95       	ret
			}
			break;
		}
		default:
		{
			if((PINC & 32) == 0)
     234:	9d 99       	sbic	0x13, 5	; 19
     236:	03 c0       	rjmp	.+6      	; 0x23e <numercyfry+0x46>
			{
				PORTB= 0b00001000;
     238:	88 e0       	ldi	r24, 0x08	; 8
     23a:	88 bb       	out	0x18, r24	; 24
     23c:	08 95       	ret
			}
			else
			{
				PORTB= 0b00000000;;
     23e:	18 ba       	out	0x18, r1	; 24
     240:	08 95       	ret

00000242 <my_delay>:
	}
}

void my_delay(int t)
{
	while(t > 0)
     242:	18 16       	cp	r1, r24
     244:	19 06       	cpc	r1, r25
     246:	34 f4       	brge	.+12     	; 0x254 <my_delay+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     248:	22 e0       	ldi	r18, 0x02	; 2
     24a:	2a 95       	dec	r18
     24c:	f1 f7       	brne	.-4      	; 0x24a <my_delay+0x8>
     24e:	00 c0       	rjmp	.+0      	; 0x250 <my_delay+0xe>
	{
		_delay_us(1);
		t--;
     250:	01 97       	sbiw	r24, 0x01	; 1
	}
}

void my_delay(int t)
{
	while(t > 0)
     252:	d1 f7       	brne	.-12     	; 0x248 <my_delay+0x6>
     254:	08 95       	ret

00000256 <liczba>:
		t--;
	}
}

void liczba(int k, int dot, int micros)
{
     256:	cf 92       	push	r12
     258:	df 92       	push	r13
     25a:	ef 92       	push	r14
     25c:	ff 92       	push	r15
     25e:	0f 93       	push	r16
     260:	1f 93       	push	r17
     262:	cf 93       	push	r28
     264:	df 93       	push	r29
     266:	06 2f       	mov	r16, r22
     268:	7a 01       	movw	r14, r20
     26a:	c1 e0       	ldi	r28, 0x01	; 1
	unsigned char cyf;
	for(int l= 1; l < 4; l++)
	{
		cyf= k% 10;
		cyfra(cyf);
     26c:	0f 2e       	mov	r0, r31
     26e:	fa e0       	ldi	r31, 0x0A	; 10
     270:	cf 2e       	mov	r12, r31
     272:	d1 2c       	mov	r13, r1
     274:	f0 2d       	mov	r31, r0
     276:	b6 01       	movw	r22, r12
     278:	7c d6       	rcall	.+3320   	; 0xf72 <__divmodhi4>
     27a:	16 2f       	mov	r17, r22
     27c:	d7 2f       	mov	r29, r23
     27e:	5f df       	rcall	.-322    	; 0x13e <cyfra>
		numercyfry(l);
     280:	8c 2f       	mov	r24, r28
     282:	ba df       	rcall	.-140    	; 0x1f8 <numercyfry>
		my_delay(micros);
     284:	c7 01       	movw	r24, r14
     286:	dd df       	rcall	.-70     	; 0x242 <my_delay>
		k= k/10;
     288:	81 2f       	mov	r24, r17
     28a:	9d 2f       	mov	r25, r29
     28c:	cf 5f       	subi	r28, 0xFF	; 255
}

void liczba(int k, int dot, int micros)
{
	unsigned char cyf;
	for(int l= 1; l < 4; l++)
     28e:	c4 30       	cpi	r28, 0x04	; 4
     290:	91 f7       	brne	.-28     	; 0x276 <liczba+0x20>
		cyfra(cyf);
		numercyfry(l);
		my_delay(micros);
		k= k/10;
	}
	cyfra(10);
     292:	8a e0       	ldi	r24, 0x0A	; 10
     294:	54 df       	rcall	.-344    	; 0x13e <cyfra>
	numercyfry(dot);
     296:	80 2f       	mov	r24, r16
     298:	af df       	rcall	.-162    	; 0x1f8 <numercyfry>
	my_delay(micros);
     29a:	c7 01       	movw	r24, r14
     29c:	d2 df       	rcall	.-92     	; 0x242 <my_delay>
}
     29e:	df 91       	pop	r29
     2a0:	cf 91       	pop	r28
     2a2:	1f 91       	pop	r17
     2a4:	0f 91       	pop	r16
     2a6:	ff 90       	pop	r15
     2a8:	ef 90       	pop	r14
     2aa:	df 90       	pop	r13
     2ac:	cf 90       	pop	r12
     2ae:	08 95       	ret

000002b0 <main>:

uint32_t przebieg_ee EEMEM;

int main()
{
     2b0:	cf 93       	push	r28
     2b2:	df 93       	push	r29
     2b4:	cd b7       	in	r28, 0x3d	; 61
     2b6:	de b7       	in	r29, 0x3e	; 62
     2b8:	a2 97       	sbiw	r28, 0x22	; 34
     2ba:	0f b6       	in	r0, 0x3f	; 63
     2bc:	f8 94       	cli
     2be:	de bf       	out	0x3e, r29	; 62
     2c0:	0f be       	out	0x3f, r0	; 63
     2c2:	cd bf       	out	0x3d, r28	; 61
	DDRB= 0b00001111;
     2c4:	8f e0       	ldi	r24, 0x0F	; 15
     2c6:	87 bb       	out	0x17, r24	; 23
	DDRD= 0b11111111;
     2c8:	8f ef       	ldi	r24, 0xFF	; 255
     2ca:	81 bb       	out	0x11, r24	; 17
	DDRC= 0b00000000;
     2cc:	14 ba       	out	0x14, r1	; 20
	PORTC= 0b00000111;
     2ce:	87 e0       	ldi	r24, 0x07	; 7
     2d0:	85 bb       	out	0x15, r24	; 21
	
	TCCR1B= 0b00000100; // prescaler = 256
     2d2:	84 e0       	ldi	r24, 0x04	; 4
     2d4:	8e bd       	out	0x2e, r24	; 46
	TCNT1= 0;
     2d6:	1d bc       	out	0x2d, r1	; 45
     2d8:	1c bc       	out	0x2c, r1	; 44
	TIFR= 1 << TOV1;
     2da:	88 bf       	out	0x38, r24	; 56
	
	ADMUX= 0b01000100; // AVCC reference, right adjust, ADC4 pin  
     2dc:	84 e4       	ldi	r24, 0x44	; 68
     2de:	87 b9       	out	0x07, r24	; 7
	ADCSRA= 0b11100111; // prescaler 128, enable ADC and start conversion, free running mode
     2e0:	87 ee       	ldi	r24, 0xE7	; 231
     2e2:	86 b9       	out	0x06, r24	; 6
	uint32_t dystans= 0;
	unsigned int klatka, ktora= 0;
	
	float predkosc= 0, srednia_predkosc= 0, rpm= 0, mnoznik= 3.6;
	float czas, caly_czas= 0;	
	uint32_t przebieg= eeprom_read_dword(&przebieg_ee);
     2e4:	80 e0       	ldi	r24, 0x00	; 0
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	6b d6       	rcall	.+3286   	; 0xfc0 <eeprom_read_dword>
     2ea:	69 8b       	std	Y+17, r22	; 0x11
     2ec:	7a 8b       	std	Y+18, r23	; 0x12
     2ee:	8b 8b       	std	Y+19, r24	; 0x13
     2f0:	9c 8b       	std	Y+20, r25	; 0x14
	float temperatura;
	uint32_t dystans= 0;
	unsigned int klatka, ktora= 0;
	
	float predkosc= 0, srednia_predkosc= 0, rpm= 0, mnoznik= 3.6;
	float czas, caly_czas= 0;	
     2f2:	19 8e       	std	Y+25, r1	; 0x19
     2f4:	1a 8e       	std	Y+26, r1	; 0x1a
     2f6:	1b 8e       	std	Y+27, r1	; 0x1b
     2f8:	1c 8e       	std	Y+28, r1	; 0x1c
	unsigned char poprzedni= 0, teraz= 0, poprzedni_guzik0= 0, teraz_guzik0= 0, poprzedni_guzik1= 0, teraz_guzik1= 0, poprzedni_guzik2= 0, teraz_guzik2= 0, tryb= 0;
	float temperatura;
	uint32_t dystans= 0;
	unsigned int klatka, ktora= 0;
	
	float predkosc= 0, srednia_predkosc= 0, rpm= 0, mnoznik= 3.6;
     2fa:	26 e6       	ldi	r18, 0x66	; 102
     2fc:	2d 8b       	std	Y+21, r18	; 0x15
     2fe:	36 e6       	ldi	r19, 0x66	; 102
     300:	3e 8b       	std	Y+22, r19	; 0x16
     302:	86 e6       	ldi	r24, 0x66	; 102
     304:	8f 8b       	std	Y+23, r24	; 0x17
     306:	90 e4       	ldi	r25, 0x40	; 64
     308:	98 8f       	std	Y+24, r25	; 0x18
     30a:	1e 82       	std	Y+6, r1	; 0x06
     30c:	1f 82       	std	Y+7, r1	; 0x07
     30e:	18 86       	std	Y+8, r1	; 0x08
     310:	19 86       	std	Y+9, r1	; 0x09
     312:	1d 8e       	std	Y+29, r1	; 0x1d
     314:	1e 8e       	std	Y+30, r1	; 0x1e
     316:	1f 8e       	std	Y+31, r1	; 0x1f
     318:	18 a2       	std	Y+32, r1	; 0x20
     31a:	1a 82       	std	Y+2, r1	; 0x02
     31c:	1b 82       	std	Y+3, r1	; 0x03
     31e:	1c 82       	std	Y+4, r1	; 0x04
     320:	1d 82       	std	Y+5, r1	; 0x05
	
	const float obwod= 2.18; // [m]
	unsigned char poprzedni= 0, teraz= 0, poprzedni_guzik0= 0, teraz_guzik0= 0, poprzedni_guzik1= 0, teraz_guzik1= 0, poprzedni_guzik2= 0, teraz_guzik2= 0, tryb= 0;
	float temperatura;
	uint32_t dystans= 0;
	unsigned int klatka, ktora= 0;
     322:	61 2c       	mov	r6, r1
     324:	71 2c       	mov	r7, r1
	ADCSRA= 0b11100111; // prescaler 128, enable ADC and start conversion, free running mode
	
	const float obwod= 2.18; // [m]
	unsigned char poprzedni= 0, teraz= 0, poprzedni_guzik0= 0, teraz_guzik0= 0, poprzedni_guzik1= 0, teraz_guzik1= 0, poprzedni_guzik2= 0, teraz_guzik2= 0, tryb= 0;
	float temperatura;
	uint32_t dystans= 0;
     326:	1d 86       	std	Y+13, r1	; 0x0d
     328:	1e 86       	std	Y+14, r1	; 0x0e
     32a:	1f 86       	std	Y+15, r1	; 0x0f
     32c:	18 8a       	std	Y+16, r1	; 0x10
	
	ADMUX= 0b01000100; // AVCC reference, right adjust, ADC4 pin  
	ADCSRA= 0b11100111; // prescaler 128, enable ADC and start conversion, free running mode
	
	const float obwod= 2.18; // [m]
	unsigned char poprzedni= 0, teraz= 0, poprzedni_guzik0= 0, teraz_guzik0= 0, poprzedni_guzik1= 0, teraz_guzik1= 0, poprzedni_guzik2= 0, teraz_guzik2= 0, tryb= 0;
     32e:	21 2c       	mov	r2, r1
     330:	31 2c       	mov	r3, r1
     332:	41 2c       	mov	r4, r1
     334:	51 2c       	mov	r5, r1
     336:	20 e0       	ldi	r18, 0x00	; 0
	float czas, caly_czas= 0;	
	uint32_t przebieg= eeprom_read_dword(&przebieg_ee);

	while(1)
	{
		teraz= !(PINC & 32);
     338:	99 24       	eor	r9, r9
     33a:	93 94       	inc	r9
			{
				mnoznik= 3.6;
			}
			else
			{
				mnoznik= 1;
     33c:	12 2d       	mov	r17, r2
	float czas, caly_czas= 0;	
	uint32_t przebieg= eeprom_read_dword(&przebieg_ee);

	while(1)
	{
		teraz= !(PINC & 32);
     33e:	83 b3       	in	r24, 0x13	; 19
     340:	80 72       	andi	r24, 0x20	; 32
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	99 82       	std	Y+1, r9	; 0x01
     346:	00 97       	sbiw	r24, 0x00	; 0
     348:	09 f0       	breq	.+2      	; 0x34c <main+0x9c>
     34a:	19 82       	std	Y+1, r1	; 0x01
		teraz_guzik0= !(PINC & 1);
     34c:	33 b3       	in	r19, 0x13	; 19
     34e:	29 2c       	mov	r2, r9
     350:	30 fb       	bst	r19, 0
     352:	ee 24       	eor	r14, r14
     354:	e0 f8       	bld	r14, 0
     356:	f1 2c       	mov	r15, r1
     358:	30 fd       	sbrc	r19, 0
     35a:	21 2c       	mov	r2, r1
		teraz_guzik1= !(PINC & 2);
     35c:	33 b3       	in	r19, 0x13	; 19
     35e:	32 70       	andi	r19, 0x02	; 2
     360:	c3 2e       	mov	r12, r19
     362:	d1 2c       	mov	r13, r1
     364:	89 2c       	mov	r8, r9
     366:	c1 14       	cp	r12, r1
     368:	d1 04       	cpc	r13, r1
     36a:	09 f0       	breq	.+2      	; 0x36e <main+0xbe>
     36c:	81 2c       	mov	r8, r1
		teraz_guzik2= !(PINC & 4);
     36e:	33 b3       	in	r19, 0x13	; 19
     370:	34 70       	andi	r19, 0x04	; 4
     372:	a3 2e       	mov	r10, r19
     374:	b1 2c       	mov	r11, r1
     376:	09 2d       	mov	r16, r9
     378:	a1 14       	cp	r10, r1
     37a:	b1 04       	cpc	r11, r1
     37c:	09 f0       	breq	.+2      	; 0x380 <main+0xd0>
     37e:	00 e0       	ldi	r16, 0x00	; 0
		
		temperatura= (ADCL + (ADCH << 8));
     380:	a4 b1       	in	r26, 0x04	; 4
     382:	aa 87       	std	Y+10, r26	; 0x0a
     384:	b5 b1       	in	r27, 0x05	; 5
     386:	bb 87       	std	Y+11, r27	; 0x0b
		temperatura= temperatura*500/1024 -50;
		
		
		if( (poprzedni == 0) && (teraz == 1) )
     388:	21 11       	cpse	r18, r1
     38a:	6b c0       	rjmp	.+214    	; 0x462 <__stack+0x3>
     38c:	89 2b       	or	r24, r25
     38e:	09 f0       	breq	.+2      	; 0x392 <main+0xe2>
     390:	68 c0       	rjmp	.+208    	; 0x462 <__stack+0x3>
		{
			// pomiar czasu
			
			dystans++;
     392:	8d 85       	ldd	r24, Y+13	; 0x0d
     394:	9e 85       	ldd	r25, Y+14	; 0x0e
     396:	af 85       	ldd	r26, Y+15	; 0x0f
     398:	b8 89       	ldd	r27, Y+16	; 0x10
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	a1 1d       	adc	r26, r1
     39e:	b1 1d       	adc	r27, r1
     3a0:	8d 87       	std	Y+13, r24	; 0x0d
     3a2:	9e 87       	std	Y+14, r25	; 0x0e
     3a4:	af 87       	std	Y+15, r26	; 0x0f
     3a6:	b8 8b       	std	Y+16, r27	; 0x10
			przebieg++;
     3a8:	89 89       	ldd	r24, Y+17	; 0x11
     3aa:	9a 89       	ldd	r25, Y+18	; 0x12
     3ac:	ab 89       	ldd	r26, Y+19	; 0x13
     3ae:	bc 89       	ldd	r27, Y+20	; 0x14
     3b0:	01 96       	adiw	r24, 0x01	; 1
     3b2:	a1 1d       	adc	r26, r1
     3b4:	b1 1d       	adc	r27, r1
     3b6:	89 8b       	std	Y+17, r24	; 0x11
     3b8:	9a 8b       	std	Y+18, r25	; 0x12
     3ba:	ab 8b       	std	Y+19, r26	; 0x13
     3bc:	bc 8b       	std	Y+20, r27	; 0x14
			
			if( TIFR & (1 << TOV1) )
     3be:	08 b6       	in	r0, 0x38	; 56
     3c0:	02 fe       	sbrs	r0, 2
     3c2:	0a c0       	rjmp	.+20     	; 0x3d8 <main+0x128>
			{
				czas= 10000;
				TIFR= 1 << TOV1;
     3c4:	94 e0       	ldi	r25, 0x04	; 4
     3c6:	98 bf       	out	0x38, r25	; 56
			dystans++;
			przebieg++;
			
			if( TIFR & (1 << TOV1) )
			{
				czas= 10000;
     3c8:	1e 82       	std	Y+6, r1	; 0x06
     3ca:	a0 e4       	ldi	r26, 0x40	; 64
     3cc:	ac 87       	std	Y+12, r26	; 0x0c
     3ce:	bc e1       	ldi	r27, 0x1C	; 28
     3d0:	ba a3       	std	Y+34, r27	; 0x22
     3d2:	26 e4       	ldi	r18, 0x46	; 70
     3d4:	29 a3       	std	Y+33, r18	; 0x21
     3d6:	1b c0       	rjmp	.+54     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
				TIFR= 1 << TOV1;
			} else
			{
				czas= TCNT1*0.000032;
     3d8:	6c b5       	in	r22, 0x2c	; 44
     3da:	7d b5       	in	r23, 0x2d	; 45
     3dc:	80 e0       	ldi	r24, 0x00	; 0
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	af d4       	rcall	.+2398   	; 0xd40 <__floatunsisf>
     3e2:	2d eb       	ldi	r18, 0xBD	; 189
     3e4:	37 e3       	ldi	r19, 0x37	; 55
     3e6:	46 e0       	ldi	r20, 0x06	; 6
     3e8:	58 e3       	ldi	r21, 0x38	; 56
     3ea:	60 d5       	rcall	.+2752   	; 0xeac <__mulsf3>
     3ec:	6e 83       	std	Y+6, r22	; 0x06
     3ee:	7c 87       	std	Y+12, r23	; 0x0c
     3f0:	8a a3       	std	Y+34, r24	; 0x22
     3f2:	99 a3       	std	Y+33, r25	; 0x21
				caly_czas+= czas;
     3f4:	26 2f       	mov	r18, r22
     3f6:	37 2f       	mov	r19, r23
     3f8:	48 2f       	mov	r20, r24
     3fa:	59 2f       	mov	r21, r25
     3fc:	69 8d       	ldd	r22, Y+25	; 0x19
     3fe:	7a 8d       	ldd	r23, Y+26	; 0x1a
     400:	8b 8d       	ldd	r24, Y+27	; 0x1b
     402:	9c 8d       	ldd	r25, Y+28	; 0x1c
     404:	9c d3       	rcall	.+1848   	; 0xb3e <__addsf3>
     406:	69 8f       	std	Y+25, r22	; 0x19
     408:	7a 8f       	std	Y+26, r23	; 0x1a
     40a:	8b 8f       	std	Y+27, r24	; 0x1b
     40c:	9c 8f       	std	Y+28, r25	; 0x1c
			}
			TCNT1= 0;
     40e:	1d bc       	out	0x2d, r1	; 45
     410:	1c bc       	out	0x2c, r1	; 44
			predkosc= (obwod/czas);
     412:	2e 81       	ldd	r18, Y+6	; 0x06
     414:	3c 85       	ldd	r19, Y+12	; 0x0c
     416:	4a a1       	ldd	r20, Y+34	; 0x22
     418:	59 a1       	ldd	r21, Y+33	; 0x21
     41a:	6f e1       	ldi	r22, 0x1F	; 31
     41c:	75 e8       	ldi	r23, 0x85	; 133
     41e:	8b e0       	ldi	r24, 0x0B	; 11
     420:	90 e4       	ldi	r25, 0x40	; 64
     422:	f5 d3       	rcall	.+2026   	; 0xc0e <__divsf3>
     424:	6a 83       	std	Y+2, r22	; 0x02
     426:	7b 83       	std	Y+3, r23	; 0x03
     428:	8c 83       	std	Y+4, r24	; 0x04
     42a:	9d 83       	std	Y+5, r25	; 0x05
			srednia_predkosc= dystans/caly_czas;
     42c:	6d 85       	ldd	r22, Y+13	; 0x0d
     42e:	7e 85       	ldd	r23, Y+14	; 0x0e
     430:	8f 85       	ldd	r24, Y+15	; 0x0f
     432:	98 89       	ldd	r25, Y+16	; 0x10
     434:	85 d4       	rcall	.+2314   	; 0xd40 <__floatunsisf>
     436:	29 8d       	ldd	r18, Y+25	; 0x19
     438:	3a 8d       	ldd	r19, Y+26	; 0x1a
     43a:	4b 8d       	ldd	r20, Y+27	; 0x1b
     43c:	5c 8d       	ldd	r21, Y+28	; 0x1c
     43e:	e7 d3       	rcall	.+1998   	; 0xc0e <__divsf3>
     440:	6d 8f       	std	Y+29, r22	; 0x1d
     442:	7e 8f       	std	Y+30, r23	; 0x1e
     444:	8f 8f       	std	Y+31, r24	; 0x1f
     446:	98 a3       	std	Y+32, r25	; 0x20
			rpm= 60/czas;
     448:	2e 81       	ldd	r18, Y+6	; 0x06
     44a:	3c 85       	ldd	r19, Y+12	; 0x0c
     44c:	4a a1       	ldd	r20, Y+34	; 0x22
     44e:	59 a1       	ldd	r21, Y+33	; 0x21
     450:	60 e0       	ldi	r22, 0x00	; 0
     452:	70 e0       	ldi	r23, 0x00	; 0
     454:	80 e7       	ldi	r24, 0x70	; 112
     456:	92 e4       	ldi	r25, 0x42	; 66
     458:	da d3       	rcall	.+1972   	; 0xc0e <__divsf3>
     45a:	6e 83       	std	Y+6, r22	; 0x06
     45c:	7f 83       	std	Y+7, r23	; 0x07
     45e:	88 87       	std	Y+8, r24	; 0x08
     460:	99 87       	std	Y+9, r25	; 0x09
		//else
		//{
			//klatka= 2000;
		//}
		
		if(predkosc > 5)
     462:	20 e0       	ldi	r18, 0x00	; 0
     464:	30 e0       	ldi	r19, 0x00	; 0
     466:	40 ea       	ldi	r20, 0xA0	; 160
     468:	50 e4       	ldi	r21, 0x40	; 64
     46a:	6a 81       	ldd	r22, Y+2	; 0x02
     46c:	7b 81       	ldd	r23, Y+3	; 0x03
     46e:	8c 81       	ldd	r24, Y+4	; 0x04
     470:	9d 81       	ldd	r25, Y+5	; 0x05
     472:	18 d5       	rcall	.+2608   	; 0xea4 <__gesf2>
     474:	18 16       	cp	r1, r24
     476:	6c f4       	brge	.+26     	; 0x492 <__stack+0x33>
		{
			klatka= 8000/predkosc;
     478:	2a 81       	ldd	r18, Y+2	; 0x02
     47a:	3b 81       	ldd	r19, Y+3	; 0x03
     47c:	4c 81       	ldd	r20, Y+4	; 0x04
     47e:	5d 81       	ldd	r21, Y+5	; 0x05
     480:	60 e0       	ldi	r22, 0x00	; 0
     482:	70 e0       	ldi	r23, 0x00	; 0
     484:	8a ef       	ldi	r24, 0xFA	; 250
     486:	95 e4       	ldi	r25, 0x45	; 69
     488:	c2 d3       	rcall	.+1924   	; 0xc0e <__divsf3>
     48a:	2e d4       	rcall	.+2140   	; 0xce8 <__fixunssfsi>
     48c:	6c 87       	std	Y+12, r22	; 0x0c
     48e:	79 a3       	std	Y+33, r23	; 0x21
     490:	04 c0       	rjmp	.+8      	; 0x49a <__stack+0x3b>
		}
		else
		{
			klatka= 2000;
     492:	30 ed       	ldi	r19, 0xD0	; 208
     494:	3c 87       	std	Y+12, r19	; 0x0c
     496:	87 e0       	ldi	r24, 0x07	; 7
     498:	89 a3       	std	Y+33, r24	; 0x21
		}
		
		if(ktora > 2000)
     49a:	91 ed       	ldi	r25, 0xD1	; 209
     49c:	69 16       	cp	r6, r25
     49e:	97 e0       	ldi	r25, 0x07	; 7
     4a0:	79 06       	cpc	r7, r25
     4a2:	88 f4       	brcc	.+34     	; 0x4c6 <__stack+0x67>
			tryb= 48;
			ktora= 2001;
		}
		else
		{
			tryb= tryb%7;
     4a4:	a5 e2       	ldi	r26, 0x25	; 37
     4a6:	1a 9f       	mul	r17, r26
     4a8:	91 2d       	mov	r25, r1
     4aa:	11 24       	eor	r1, r1
     4ac:	81 2f       	mov	r24, r17
     4ae:	89 1b       	sub	r24, r25
     4b0:	86 95       	lsr	r24
     4b2:	89 0f       	add	r24, r25
     4b4:	86 95       	lsr	r24
     4b6:	86 95       	lsr	r24
     4b8:	98 2f       	mov	r25, r24
     4ba:	99 0f       	add	r25, r25
     4bc:	99 0f       	add	r25, r25
     4be:	99 0f       	add	r25, r25
     4c0:	98 1b       	sub	r25, r24
     4c2:	19 1b       	sub	r17, r25
     4c4:	07 c0       	rjmp	.+14     	; 0x4d4 <__stack+0x75>
		}
		
		if(ktora > 2000)
		{
			tryb= 48;
			ktora= 2001;
     4c6:	0f 2e       	mov	r0, r31
     4c8:	f1 ed       	ldi	r31, 0xD1	; 209
     4ca:	6f 2e       	mov	r6, r31
     4cc:	f7 e0       	ldi	r31, 0x07	; 7
     4ce:	7f 2e       	mov	r7, r31
     4d0:	f0 2d       	mov	r31, r0
			klatka= 2000;
		}
		
		if(ktora > 2000)
		{
			tryb= 48;
     4d2:	10 e3       	ldi	r17, 0x30	; 48
		else
		{
			tryb= tryb%7;
		}
		
		if( (PINC & 7) == 0)
     4d4:	83 b3       	in	r24, 0x13	; 19
     4d6:	87 70       	andi	r24, 0x07	; 7
     4d8:	89 f4       	brne	.+34     	; 0x4fc <__stack+0x9d>
		{
			eeprom_write_dword(&przebieg_ee, 0);
     4da:	40 e0       	ldi	r20, 0x00	; 0
     4dc:	50 e0       	ldi	r21, 0x00	; 0
     4de:	ba 01       	movw	r22, r20
     4e0:	80 e0       	ldi	r24, 0x00	; 0
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	72 d5       	rcall	.+2788   	; 0xfca <eeprom_write_dword>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4e6:	bf ef       	ldi	r27, 0xFF	; 255
     4e8:	27 e8       	ldi	r18, 0x87	; 135
     4ea:	33 e1       	ldi	r19, 0x13	; 19
     4ec:	b1 50       	subi	r27, 0x01	; 1
     4ee:	20 40       	sbci	r18, 0x00	; 0
     4f0:	30 40       	sbci	r19, 0x00	; 0
     4f2:	e1 f7       	brne	.-8      	; 0x4ec <__stack+0x8d>
     4f4:	00 c0       	rjmp	.+0      	; 0x4f6 <__stack+0x97>
     4f6:	00 00       	nop
			_delay_ms(800);
			ktora= 0;
     4f8:	61 2c       	mov	r6, r1
     4fa:	71 2c       	mov	r7, r1
		}
		
		if( (poprzedni_guzik0 == 0) && (teraz_guzik0 == 1) )
     4fc:	51 10       	cpse	r5, r1
     4fe:	0b c0       	rjmp	.+22     	; 0x516 <__stack+0xb7>
     500:	ef 28       	or	r14, r15
     502:	49 f4       	brne	.+18     	; 0x516 <__stack+0xb7>
		{
			tryb= (tryb + 1)%7 ;
     504:	81 2f       	mov	r24, r17
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	01 96       	adiw	r24, 0x01	; 1
     50a:	67 e0       	ldi	r22, 0x07	; 7
     50c:	70 e0       	ldi	r23, 0x00	; 0
     50e:	31 d5       	rcall	.+2658   	; 0xf72 <__divmodhi4>
     510:	18 2f       	mov	r17, r24
			ktora= 0;
     512:	61 2c       	mov	r6, r1
     514:	71 2c       	mov	r7, r1
		}
		
		if( (poprzedni_guzik1 == 0) && (teraz_guzik1 == 1) )
     516:	41 10       	cpse	r4, r1
     518:	20 c0       	rjmp	.+64     	; 0x55a <__stack+0xfb>
     51a:	cd 28       	or	r12, r13
     51c:	f1 f4       	brne	.+60     	; 0x55a <__stack+0xfb>
		{
			if(mnoznik < 3)
     51e:	20 e0       	ldi	r18, 0x00	; 0
     520:	30 e0       	ldi	r19, 0x00	; 0
     522:	40 e4       	ldi	r20, 0x40	; 64
     524:	50 e4       	ldi	r21, 0x40	; 64
     526:	6d 89       	ldd	r22, Y+21	; 0x15
     528:	7e 89       	ldd	r23, Y+22	; 0x16
     52a:	8f 89       	ldd	r24, Y+23	; 0x17
     52c:	98 8d       	ldd	r25, Y+24	; 0x18
     52e:	6b d3       	rcall	.+1750   	; 0xc06 <__cmpsf2>
     530:	88 23       	and	r24, r24
     532:	4c f0       	brlt	.+18     	; 0x546 <__stack+0xe7>
			{
				mnoznik= 3.6;
			}
			else
			{
				mnoznik= 1;
     534:	1d 8a       	std	Y+21, r1	; 0x15
     536:	1e 8a       	std	Y+22, r1	; 0x16
     538:	80 e8       	ldi	r24, 0x80	; 128
     53a:	8f 8b       	std	Y+23, r24	; 0x17
     53c:	9f e3       	ldi	r25, 0x3F	; 63
     53e:	98 8f       	std	Y+24, r25	; 0x18
			}
			ktora= 0;
     540:	61 2c       	mov	r6, r1
     542:	71 2c       	mov	r7, r1
     544:	0a c0       	rjmp	.+20     	; 0x55a <__stack+0xfb>
		
		if( (poprzedni_guzik1 == 0) && (teraz_guzik1 == 1) )
		{
			if(mnoznik < 3)
			{
				mnoznik= 3.6;
     546:	a6 e6       	ldi	r26, 0x66	; 102
     548:	ad 8b       	std	Y+21, r26	; 0x15
     54a:	b6 e6       	ldi	r27, 0x66	; 102
     54c:	be 8b       	std	Y+22, r27	; 0x16
     54e:	26 e6       	ldi	r18, 0x66	; 102
     550:	2f 8b       	std	Y+23, r18	; 0x17
     552:	30 e4       	ldi	r19, 0x40	; 64
     554:	38 8f       	std	Y+24, r19	; 0x18
			}
			else
			{
				mnoznik= 1;
			}
			ktora= 0;
     556:	61 2c       	mov	r6, r1
     558:	71 2c       	mov	r7, r1
		}
		
		if( (poprzedni_guzik2 == 0) && (teraz_guzik2 == 1) )
     55a:	31 10       	cpse	r3, r1
     55c:	13 c0       	rjmp	.+38     	; 0x584 <__stack+0x125>
     55e:	ab 28       	or	r10, r11
     560:	89 f4       	brne	.+34     	; 0x584 <__stack+0x125>
		{
			eeprom_write_dword(&przebieg_ee, przebieg);
     562:	49 89       	ldd	r20, Y+17	; 0x11
     564:	5a 89       	ldd	r21, Y+18	; 0x12
     566:	6b 89       	ldd	r22, Y+19	; 0x13
     568:	7c 89       	ldd	r23, Y+20	; 0x14
     56a:	80 e0       	ldi	r24, 0x00	; 0
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	2d d5       	rcall	.+2650   	; 0xfca <eeprom_write_dword>
			ktora= 0;
		}
		
		switch(tryb)
     570:	81 2f       	mov	r24, r17
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	81 33       	cpi	r24, 0x31	; 49
     576:	91 05       	cpc	r25, r1
     578:	08 f0       	brcs	.+2      	; 0x57c <__stack+0x11d>
     57a:	d6 c2       	rjmp	.+1452   	; 0xb28 <__stack+0x6c9>
     57c:	fc 01       	movw	r30, r24
     57e:	ec 5c       	subi	r30, 0xCC	; 204
     580:	ff 4f       	sbci	r31, 0xFF	; 255
     582:	09 94       	ijmp
     584:	81 2f       	mov	r24, r17
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	81 33       	cpi	r24, 0x31	; 49
     58a:	91 05       	cpc	r25, r1
     58c:	08 f0       	brcs	.+2      	; 0x590 <__stack+0x131>
     58e:	ce c2       	rjmp	.+1436   	; 0xb2c <__stack+0x6cd>
     590:	fc 01       	movw	r30, r24
     592:	eb 59       	subi	r30, 0x9B	; 155
     594:	ff 4f       	sbci	r31, 0xFF	; 255
     596:	09 94       	ijmp
		{
			case 0: // distance
			{
				if(ktora < 200)
     598:	88 ec       	ldi	r24, 0xC8	; 200
     59a:	68 16       	cp	r6, r24
     59c:	71 04       	cpc	r7, r1
     59e:	c8 f4       	brcc	.+50     	; 0x5d2 <__stack+0x173>
     5a0:	02 c0       	rjmp	.+4      	; 0x5a6 <__stack+0x147>
		}
		
		if( (poprzedni_guzik2 == 0) && (teraz_guzik2 == 1) )
		{
			eeprom_write_dword(&przebieg_ee, przebieg);
			ktora= 0;
     5a2:	61 2c       	mov	r6, r1
     5a4:	71 2c       	mov	r7, r1
		{
			case 0: // distance
			{
				if(ktora < 200)
				{
					cyfra(14);
     5a6:	8e e0       	ldi	r24, 0x0E	; 14
     5a8:	ca dd       	rcall	.-1132   	; 0x13e <cyfra>
					numercyfry(3);
     5aa:	83 e0       	ldi	r24, 0x03	; 3
     5ac:	25 de       	rcall	.-950    	; 0x1f8 <numercyfry>
					my_delay(klatka);
     5ae:	8c 85       	ldd	r24, Y+12	; 0x0c
     5b0:	99 a1       	ldd	r25, Y+33	; 0x21
     5b2:	47 de       	rcall	.-882    	; 0x242 <my_delay>
					cyfra(19);
     5b4:	83 e1       	ldi	r24, 0x13	; 19
     5b6:	c3 dd       	rcall	.-1146   	; 0x13e <cyfra>
					numercyfry(2);
     5b8:	82 e0       	ldi	r24, 0x02	; 2
     5ba:	1e de       	rcall	.-964    	; 0x1f8 <numercyfry>
					my_delay(klatka);
     5bc:	8c 85       	ldd	r24, Y+12	; 0x0c
     5be:	99 a1       	ldd	r25, Y+33	; 0x21
     5c0:	40 de       	rcall	.-896    	; 0x242 <my_delay>
					cyfra(5);
     5c2:	85 e0       	ldi	r24, 0x05	; 5
     5c4:	bc dd       	rcall	.-1160   	; 0x13e <cyfra>
					numercyfry(1);
     5c6:	89 2d       	mov	r24, r9
     5c8:	17 de       	rcall	.-978    	; 0x1f8 <numercyfry>
					my_delay(klatka);
     5ca:	8c 85       	ldd	r24, Y+12	; 0x0c
     5cc:	99 a1       	ldd	r25, Y+33	; 0x21
     5ce:	39 de       	rcall	.-910    	; 0x242 <my_delay>
     5d0:	ad c2       	rjmp	.+1370   	; 0xb2c <__stack+0x6cd>
				}		
				else if(dystans*obwod < 100)
     5d2:	6d 85       	ldd	r22, Y+13	; 0x0d
     5d4:	7e 85       	ldd	r23, Y+14	; 0x0e
     5d6:	8f 85       	ldd	r24, Y+15	; 0x0f
     5d8:	98 89       	ldd	r25, Y+16	; 0x10
     5da:	b2 d3       	rcall	.+1892   	; 0xd40 <__floatunsisf>
     5dc:	2f e1       	ldi	r18, 0x1F	; 31
     5de:	35 e8       	ldi	r19, 0x85	; 133
     5e0:	4b e0       	ldi	r20, 0x0B	; 11
     5e2:	50 e4       	ldi	r21, 0x40	; 64
     5e4:	63 d4       	rcall	.+2246   	; 0xeac <__mulsf3>
     5e6:	5b 01       	movw	r10, r22
     5e8:	6c 01       	movw	r12, r24
     5ea:	20 e0       	ldi	r18, 0x00	; 0
     5ec:	30 e0       	ldi	r19, 0x00	; 0
     5ee:	48 ec       	ldi	r20, 0xC8	; 200
     5f0:	52 e4       	ldi	r21, 0x42	; 66
     5f2:	09 d3       	rcall	.+1554   	; 0xc06 <__cmpsf2>
     5f4:	88 23       	and	r24, r24
     5f6:	84 f4       	brge	.+32     	; 0x618 <__stack+0x1b9>
				{
					liczba(dystans*obwod*10, 2, klatka);
     5f8:	20 e0       	ldi	r18, 0x00	; 0
     5fa:	30 e0       	ldi	r19, 0x00	; 0
     5fc:	40 e2       	ldi	r20, 0x20	; 32
     5fe:	51 e4       	ldi	r21, 0x41	; 65
     600:	c6 01       	movw	r24, r12
     602:	b5 01       	movw	r22, r10
     604:	53 d4       	rcall	.+2214   	; 0xeac <__mulsf3>
     606:	6b d3       	rcall	.+1750   	; 0xcde <__fixsfsi>
     608:	dc 01       	movw	r26, r24
     60a:	cb 01       	movw	r24, r22
     60c:	4c 85       	ldd	r20, Y+12	; 0x0c
     60e:	59 a1       	ldd	r21, Y+33	; 0x21
     610:	62 e0       	ldi	r22, 0x02	; 2
     612:	70 e0       	ldi	r23, 0x00	; 0
     614:	20 de       	rcall	.-960    	; 0x256 <liczba>
     616:	8a c2       	rjmp	.+1300   	; 0xb2c <__stack+0x6cd>
				}
				else if(dystans*obwod < 1000)
     618:	20 e0       	ldi	r18, 0x00	; 0
     61a:	30 e0       	ldi	r19, 0x00	; 0
     61c:	4a e7       	ldi	r20, 0x7A	; 122
     61e:	54 e4       	ldi	r21, 0x44	; 68
     620:	c6 01       	movw	r24, r12
     622:	b5 01       	movw	r22, r10
     624:	f0 d2       	rcall	.+1504   	; 0xc06 <__cmpsf2>
     626:	88 23       	and	r24, r24
     628:	5c f4       	brge	.+22     	; 0x640 <__stack+0x1e1>
				{
					liczba(dystans*obwod, 1, klatka);
     62a:	c6 01       	movw	r24, r12
     62c:	b5 01       	movw	r22, r10
     62e:	57 d3       	rcall	.+1710   	; 0xcde <__fixsfsi>
     630:	dc 01       	movw	r26, r24
     632:	cb 01       	movw	r24, r22
     634:	4c 85       	ldd	r20, Y+12	; 0x0c
     636:	59 a1       	ldd	r21, Y+33	; 0x21
     638:	61 e0       	ldi	r22, 0x01	; 1
     63a:	70 e0       	ldi	r23, 0x00	; 0
     63c:	0c de       	rcall	.-1000   	; 0x256 <liczba>
     63e:	76 c2       	rjmp	.+1260   	; 0xb2c <__stack+0x6cd>
				}
				else if(dystans*obwod < 100000)
     640:	20 e0       	ldi	r18, 0x00	; 0
     642:	30 e5       	ldi	r19, 0x50	; 80
     644:	43 ec       	ldi	r20, 0xC3	; 195
     646:	57 e4       	ldi	r21, 0x47	; 71
     648:	c6 01       	movw	r24, r12
     64a:	b5 01       	movw	r22, r10
     64c:	dc d2       	rcall	.+1464   	; 0xc06 <__cmpsf2>
     64e:	88 23       	and	r24, r24
     650:	84 f4       	brge	.+32     	; 0x672 <__stack+0x213>
				{
					liczba(dystans*obwod*0.01, 2, klatka);
     652:	2a e0       	ldi	r18, 0x0A	; 10
     654:	37 ed       	ldi	r19, 0xD7	; 215
     656:	43 e2       	ldi	r20, 0x23	; 35
     658:	5c e3       	ldi	r21, 0x3C	; 60
     65a:	c6 01       	movw	r24, r12
     65c:	b5 01       	movw	r22, r10
     65e:	26 d4       	rcall	.+2124   	; 0xeac <__mulsf3>
     660:	3e d3       	rcall	.+1660   	; 0xcde <__fixsfsi>
     662:	dc 01       	movw	r26, r24
     664:	cb 01       	movw	r24, r22
     666:	4c 85       	ldd	r20, Y+12	; 0x0c
     668:	59 a1       	ldd	r21, Y+33	; 0x21
     66a:	62 e0       	ldi	r22, 0x02	; 2
     66c:	70 e0       	ldi	r23, 0x00	; 0
     66e:	f3 dd       	rcall	.-1050   	; 0x256 <liczba>
     670:	5d c2       	rjmp	.+1210   	; 0xb2c <__stack+0x6cd>
				}
				else
				{
					liczba(dystans*obwod*0.001, 1, klatka);
     672:	2f e6       	ldi	r18, 0x6F	; 111
     674:	32 e1       	ldi	r19, 0x12	; 18
     676:	43 e8       	ldi	r20, 0x83	; 131
     678:	5a e3       	ldi	r21, 0x3A	; 58
     67a:	c6 01       	movw	r24, r12
     67c:	b5 01       	movw	r22, r10
     67e:	16 d4       	rcall	.+2092   	; 0xeac <__mulsf3>
     680:	2e d3       	rcall	.+1628   	; 0xcde <__fixsfsi>
     682:	dc 01       	movw	r26, r24
     684:	cb 01       	movw	r24, r22
     686:	4c 85       	ldd	r20, Y+12	; 0x0c
     688:	59 a1       	ldd	r21, Y+33	; 0x21
     68a:	61 e0       	ldi	r22, 0x01	; 1
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	e3 dd       	rcall	.-1082   	; 0x256 <liczba>
     690:	4d c2       	rjmp	.+1178   	; 0xb2c <__stack+0x6cd>
		}
		
		if( (poprzedni_guzik2 == 0) && (teraz_guzik2 == 1) )
		{
			eeprom_write_dword(&przebieg_ee, przebieg);
			ktora= 0;
     692:	61 2c       	mov	r6, r1
     694:	71 2c       	mov	r7, r1
				break;
			}
			
			case 1: // speed
			{
				if(ktora < 200)
     696:	98 ec       	ldi	r25, 0xC8	; 200
     698:	69 16       	cp	r6, r25
     69a:	71 04       	cpc	r7, r1
     69c:	b0 f4       	brcc	.+44     	; 0x6ca <__stack+0x26b>
				{
					cyfra(5);
     69e:	85 e0       	ldi	r24, 0x05	; 5
     6a0:	4e dd       	rcall	.-1380   	; 0x13e <cyfra>
					numercyfry(3);
     6a2:	83 e0       	ldi	r24, 0x03	; 3
     6a4:	a9 dd       	rcall	.-1198   	; 0x1f8 <numercyfry>
					my_delay(klatka);
     6a6:	8c 85       	ldd	r24, Y+12	; 0x0c
     6a8:	99 a1       	ldd	r25, Y+33	; 0x21
     6aa:	cb dd       	rcall	.-1130   	; 0x242 <my_delay>
					cyfra(26);
     6ac:	8a e1       	ldi	r24, 0x1A	; 26
     6ae:	47 dd       	rcall	.-1394   	; 0x13e <cyfra>
					numercyfry(2);
     6b0:	82 e0       	ldi	r24, 0x02	; 2
     6b2:	a2 dd       	rcall	.-1212   	; 0x1f8 <numercyfry>
					my_delay(klatka);
     6b4:	8c 85       	ldd	r24, Y+12	; 0x0c
     6b6:	99 a1       	ldd	r25, Y+33	; 0x21
     6b8:	c4 dd       	rcall	.-1144   	; 0x242 <my_delay>
					cyfra(15);
     6ba:	8f e0       	ldi	r24, 0x0F	; 15
     6bc:	40 dd       	rcall	.-1408   	; 0x13e <cyfra>
					numercyfry(1);
     6be:	89 2d       	mov	r24, r9
     6c0:	9b dd       	rcall	.-1226   	; 0x1f8 <numercyfry>
					my_delay(klatka);
     6c2:	8c 85       	ldd	r24, Y+12	; 0x0c
     6c4:	99 a1       	ldd	r25, Y+33	; 0x21
     6c6:	bd dd       	rcall	.-1158   	; 0x242 <my_delay>
     6c8:	31 c2       	rjmp	.+1122   	; 0xb2c <__stack+0x6cd>
				}
				else if(predkosc*mnoznik < 10)
     6ca:	2d 89       	ldd	r18, Y+21	; 0x15
     6cc:	3e 89       	ldd	r19, Y+22	; 0x16
     6ce:	4f 89       	ldd	r20, Y+23	; 0x17
     6d0:	58 8d       	ldd	r21, Y+24	; 0x18
     6d2:	6a 81       	ldd	r22, Y+2	; 0x02
     6d4:	7b 81       	ldd	r23, Y+3	; 0x03
     6d6:	8c 81       	ldd	r24, Y+4	; 0x04
     6d8:	9d 81       	ldd	r25, Y+5	; 0x05
     6da:	e8 d3       	rcall	.+2000   	; 0xeac <__mulsf3>
     6dc:	5b 01       	movw	r10, r22
     6de:	6c 01       	movw	r12, r24
     6e0:	20 e0       	ldi	r18, 0x00	; 0
     6e2:	30 e0       	ldi	r19, 0x00	; 0
     6e4:	40 e2       	ldi	r20, 0x20	; 32
     6e6:	51 e4       	ldi	r21, 0x41	; 65
     6e8:	8e d2       	rcall	.+1308   	; 0xc06 <__cmpsf2>
     6ea:	88 23       	and	r24, r24
     6ec:	84 f4       	brge	.+32     	; 0x70e <__stack+0x2af>
				{
					liczba(predkosc*mnoznik*100, 3, klatka);
     6ee:	20 e0       	ldi	r18, 0x00	; 0
     6f0:	30 e0       	ldi	r19, 0x00	; 0
     6f2:	48 ec       	ldi	r20, 0xC8	; 200
     6f4:	52 e4       	ldi	r21, 0x42	; 66
     6f6:	c6 01       	movw	r24, r12
     6f8:	b5 01       	movw	r22, r10
     6fa:	d8 d3       	rcall	.+1968   	; 0xeac <__mulsf3>
     6fc:	f0 d2       	rcall	.+1504   	; 0xcde <__fixsfsi>
     6fe:	dc 01       	movw	r26, r24
     700:	cb 01       	movw	r24, r22
     702:	4c 85       	ldd	r20, Y+12	; 0x0c
     704:	59 a1       	ldd	r21, Y+33	; 0x21
     706:	63 e0       	ldi	r22, 0x03	; 3
     708:	70 e0       	ldi	r23, 0x00	; 0
     70a:	a5 dd       	rcall	.-1206   	; 0x256 <liczba>
     70c:	0f c2       	rjmp	.+1054   	; 0xb2c <__stack+0x6cd>
				}
				else if(predkosc*mnoznik < 100)
     70e:	20 e0       	ldi	r18, 0x00	; 0
     710:	30 e0       	ldi	r19, 0x00	; 0
     712:	48 ec       	ldi	r20, 0xC8	; 200
     714:	52 e4       	ldi	r21, 0x42	; 66
     716:	c6 01       	movw	r24, r12
     718:	b5 01       	movw	r22, r10
     71a:	75 d2       	rcall	.+1258   	; 0xc06 <__cmpsf2>
     71c:	88 23       	and	r24, r24
     71e:	84 f4       	brge	.+32     	; 0x740 <__stack+0x2e1>
				{
					liczba(predkosc*mnoznik*10, 2, klatka);
     720:	20 e0       	ldi	r18, 0x00	; 0
     722:	30 e0       	ldi	r19, 0x00	; 0
     724:	40 e2       	ldi	r20, 0x20	; 32
     726:	51 e4       	ldi	r21, 0x41	; 65
     728:	c6 01       	movw	r24, r12
     72a:	b5 01       	movw	r22, r10
     72c:	bf d3       	rcall	.+1918   	; 0xeac <__mulsf3>
     72e:	d7 d2       	rcall	.+1454   	; 0xcde <__fixsfsi>
     730:	dc 01       	movw	r26, r24
     732:	cb 01       	movw	r24, r22
     734:	4c 85       	ldd	r20, Y+12	; 0x0c
     736:	59 a1       	ldd	r21, Y+33	; 0x21
     738:	62 e0       	ldi	r22, 0x02	; 2
     73a:	70 e0       	ldi	r23, 0x00	; 0
     73c:	8c dd       	rcall	.-1256   	; 0x256 <liczba>
     73e:	f6 c1       	rjmp	.+1004   	; 0xb2c <__stack+0x6cd>
				}
				else
				{
					liczba(predkosc*mnoznik, 1, klatka);
     740:	c6 01       	movw	r24, r12
     742:	b5 01       	movw	r22, r10
     744:	cc d2       	rcall	.+1432   	; 0xcde <__fixsfsi>
     746:	dc 01       	movw	r26, r24
     748:	cb 01       	movw	r24, r22
     74a:	4c 85       	ldd	r20, Y+12	; 0x0c
     74c:	59 a1       	ldd	r21, Y+33	; 0x21
     74e:	61 e0       	ldi	r22, 0x01	; 1
     750:	70 e0       	ldi	r23, 0x00	; 0
     752:	81 dd       	rcall	.-1278   	; 0x256 <liczba>
     754:	eb c1       	rjmp	.+982    	; 0xb2c <__stack+0x6cd>
		}
		
		if( (poprzedni_guzik2 == 0) && (teraz_guzik2 == 1) )
		{
			eeprom_write_dword(&przebieg_ee, przebieg);
			ktora= 0;
     756:	61 2c       	mov	r6, r1
     758:	71 2c       	mov	r7, r1
				break;
			}
			
			case 2: // average speed
			{
				if(ktora < 200)
     75a:	a8 ec       	ldi	r26, 0xC8	; 200
     75c:	6a 16       	cp	r6, r26
     75e:	71 04       	cpc	r7, r1
     760:	b0 f4       	brcc	.+44     	; 0x78e <__stack+0x32f>
				{
					cyfra(11);
     762:	8b e0       	ldi	r24, 0x0B	; 11
     764:	ec dc       	rcall	.-1576   	; 0x13e <cyfra>
					numercyfry(3);
     766:	83 e0       	ldi	r24, 0x03	; 3
     768:	47 dd       	rcall	.-1394   	; 0x1f8 <numercyfry>
					my_delay(klatka);
     76a:	8c 85       	ldd	r24, Y+12	; 0x0c
     76c:	99 a1       	ldd	r25, Y+33	; 0x21
     76e:	69 dd       	rcall	.-1326   	; 0x242 <my_delay>
					cyfra(32);
     770:	80 e2       	ldi	r24, 0x20	; 32
     772:	e5 dc       	rcall	.-1590   	; 0x13e <cyfra>
					numercyfry(2);
     774:	82 e0       	ldi	r24, 0x02	; 2
     776:	40 dd       	rcall	.-1408   	; 0x1f8 <numercyfry>
					my_delay(klatka);
     778:	8c 85       	ldd	r24, Y+12	; 0x0c
     77a:	99 a1       	ldd	r25, Y+33	; 0x21
     77c:	62 dd       	rcall	.-1340   	; 0x242 <my_delay>
					cyfra(17);
     77e:	81 e1       	ldi	r24, 0x11	; 17
     780:	de dc       	rcall	.-1604   	; 0x13e <cyfra>
					numercyfry(1);
     782:	89 2d       	mov	r24, r9
     784:	39 dd       	rcall	.-1422   	; 0x1f8 <numercyfry>
					my_delay(klatka);
     786:	8c 85       	ldd	r24, Y+12	; 0x0c
     788:	99 a1       	ldd	r25, Y+33	; 0x21
     78a:	5b dd       	rcall	.-1354   	; 0x242 <my_delay>
     78c:	cf c1       	rjmp	.+926    	; 0xb2c <__stack+0x6cd>
				}
				else if(srednia_predkosc*mnoznik < 10)
     78e:	2d 89       	ldd	r18, Y+21	; 0x15
     790:	3e 89       	ldd	r19, Y+22	; 0x16
     792:	4f 89       	ldd	r20, Y+23	; 0x17
     794:	58 8d       	ldd	r21, Y+24	; 0x18
     796:	6d 8d       	ldd	r22, Y+29	; 0x1d
     798:	7e 8d       	ldd	r23, Y+30	; 0x1e
     79a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     79c:	98 a1       	ldd	r25, Y+32	; 0x20
     79e:	86 d3       	rcall	.+1804   	; 0xeac <__mulsf3>
     7a0:	5b 01       	movw	r10, r22
     7a2:	6c 01       	movw	r12, r24
     7a4:	20 e0       	ldi	r18, 0x00	; 0
     7a6:	30 e0       	ldi	r19, 0x00	; 0
     7a8:	40 e2       	ldi	r20, 0x20	; 32
     7aa:	51 e4       	ldi	r21, 0x41	; 65
     7ac:	2c d2       	rcall	.+1112   	; 0xc06 <__cmpsf2>
     7ae:	88 23       	and	r24, r24
     7b0:	84 f4       	brge	.+32     	; 0x7d2 <__stack+0x373>
				{
					liczba(srednia_predkosc*mnoznik*100, 3, klatka);
     7b2:	20 e0       	ldi	r18, 0x00	; 0
     7b4:	30 e0       	ldi	r19, 0x00	; 0
     7b6:	48 ec       	ldi	r20, 0xC8	; 200
     7b8:	52 e4       	ldi	r21, 0x42	; 66
     7ba:	c6 01       	movw	r24, r12
     7bc:	b5 01       	movw	r22, r10
     7be:	76 d3       	rcall	.+1772   	; 0xeac <__mulsf3>
     7c0:	8e d2       	rcall	.+1308   	; 0xcde <__fixsfsi>
     7c2:	dc 01       	movw	r26, r24
     7c4:	cb 01       	movw	r24, r22
     7c6:	4c 85       	ldd	r20, Y+12	; 0x0c
     7c8:	59 a1       	ldd	r21, Y+33	; 0x21
     7ca:	63 e0       	ldi	r22, 0x03	; 3
     7cc:	70 e0       	ldi	r23, 0x00	; 0
     7ce:	43 dd       	rcall	.-1402   	; 0x256 <liczba>
     7d0:	ad c1       	rjmp	.+858    	; 0xb2c <__stack+0x6cd>
				}
				else if(srednia_predkosc*mnoznik < 100)
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	48 ec       	ldi	r20, 0xC8	; 200
     7d8:	52 e4       	ldi	r21, 0x42	; 66
     7da:	c6 01       	movw	r24, r12
     7dc:	b5 01       	movw	r22, r10
     7de:	13 d2       	rcall	.+1062   	; 0xc06 <__cmpsf2>
     7e0:	88 23       	and	r24, r24
     7e2:	84 f4       	brge	.+32     	; 0x804 <__stack+0x3a5>
				{
					liczba(srednia_predkosc*mnoznik*10, 2, klatka);
     7e4:	20 e0       	ldi	r18, 0x00	; 0
     7e6:	30 e0       	ldi	r19, 0x00	; 0
     7e8:	40 e2       	ldi	r20, 0x20	; 32
     7ea:	51 e4       	ldi	r21, 0x41	; 65
     7ec:	c6 01       	movw	r24, r12
     7ee:	b5 01       	movw	r22, r10
     7f0:	5d d3       	rcall	.+1722   	; 0xeac <__mulsf3>
     7f2:	75 d2       	rcall	.+1258   	; 0xcde <__fixsfsi>
     7f4:	dc 01       	movw	r26, r24
     7f6:	cb 01       	movw	r24, r22
     7f8:	4c 85       	ldd	r20, Y+12	; 0x0c
     7fa:	59 a1       	ldd	r21, Y+33	; 0x21
     7fc:	62 e0       	ldi	r22, 0x02	; 2
     7fe:	70 e0       	ldi	r23, 0x00	; 0
     800:	2a dd       	rcall	.-1452   	; 0x256 <liczba>
     802:	94 c1       	rjmp	.+808    	; 0xb2c <__stack+0x6cd>
				}
				else
				{
					liczba(srednia_predkosc*mnoznik, 1, klatka);
     804:	c6 01       	movw	r24, r12
     806:	b5 01       	movw	r22, r10
     808:	6a d2       	rcall	.+1236   	; 0xcde <__fixsfsi>
     80a:	dc 01       	movw	r26, r24
     80c:	cb 01       	movw	r24, r22
     80e:	4c 85       	ldd	r20, Y+12	; 0x0c
     810:	59 a1       	ldd	r21, Y+33	; 0x21
     812:	61 e0       	ldi	r22, 0x01	; 1
     814:	70 e0       	ldi	r23, 0x00	; 0
     816:	1f dd       	rcall	.-1474   	; 0x256 <liczba>
     818:	89 c1       	rjmp	.+786    	; 0xb2c <__stack+0x6cd>
		}
		
		if( (poprzedni_guzik2 == 0) && (teraz_guzik2 == 1) )
		{
			eeprom_write_dword(&przebieg_ee, przebieg);
			ktora= 0;
     81a:	61 2c       	mov	r6, r1
     81c:	71 2c       	mov	r7, r1
				break;
			}
			
			case 3: // active time
			{
				if(ktora < 200)
     81e:	b8 ec       	ldi	r27, 0xC8	; 200
     820:	6b 16       	cp	r6, r27
     822:	71 04       	cpc	r7, r1
     824:	b0 f4       	brcc	.+44     	; 0x852 <__stack+0x3f3>
				{
					cyfra(30);
     826:	8e e1       	ldi	r24, 0x1E	; 30
     828:	8a dc       	rcall	.-1772   	; 0x13e <cyfra>
					numercyfry(3);
     82a:	83 e0       	ldi	r24, 0x03	; 3
     82c:	e5 dc       	rcall	.-1590   	; 0x1f8 <numercyfry>
					my_delay(klatka);
     82e:	8c 85       	ldd	r24, Y+12	; 0x0c
     830:	99 a1       	ldd	r25, Y+33	; 0x21
     832:	07 dd       	rcall	.-1522   	; 0x242 <my_delay>
					cyfra(19);
     834:	83 e1       	ldi	r24, 0x13	; 19
     836:	83 dc       	rcall	.-1786   	; 0x13e <cyfra>
					numercyfry(2);
     838:	82 e0       	ldi	r24, 0x02	; 2
     83a:	de dc       	rcall	.-1604   	; 0x1f8 <numercyfry>
					my_delay(klatka);
     83c:	8c 85       	ldd	r24, Y+12	; 0x0c
     83e:	99 a1       	ldd	r25, Y+33	; 0x21
     840:	00 dd       	rcall	.-1536   	; 0x242 <my_delay>
					cyfra(23);
     842:	87 e1       	ldi	r24, 0x17	; 23
     844:	7c dc       	rcall	.-1800   	; 0x13e <cyfra>
					numercyfry(1);
     846:	89 2d       	mov	r24, r9
     848:	d7 dc       	rcall	.-1618   	; 0x1f8 <numercyfry>
					my_delay(klatka);
     84a:	8c 85       	ldd	r24, Y+12	; 0x0c
     84c:	99 a1       	ldd	r25, Y+33	; 0x21
     84e:	f9 dc       	rcall	.-1550   	; 0x242 <my_delay>
     850:	6d c1       	rjmp	.+730    	; 0xb2c <__stack+0x6cd>
				}
				else
				{
					liczba(caly_czas/60, 1, klatka);
     852:	20 e0       	ldi	r18, 0x00	; 0
     854:	30 e0       	ldi	r19, 0x00	; 0
     856:	40 e7       	ldi	r20, 0x70	; 112
     858:	52 e4       	ldi	r21, 0x42	; 66
     85a:	69 8d       	ldd	r22, Y+25	; 0x19
     85c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     85e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     860:	9c 8d       	ldd	r25, Y+28	; 0x1c
     862:	d5 d1       	rcall	.+938    	; 0xc0e <__divsf3>
     864:	3c d2       	rcall	.+1144   	; 0xcde <__fixsfsi>
     866:	dc 01       	movw	r26, r24
     868:	cb 01       	movw	r24, r22
     86a:	4c 85       	ldd	r20, Y+12	; 0x0c
     86c:	59 a1       	ldd	r21, Y+33	; 0x21
     86e:	61 e0       	ldi	r22, 0x01	; 1
     870:	70 e0       	ldi	r23, 0x00	; 0
     872:	f1 dc       	rcall	.-1566   	; 0x256 <liczba>
     874:	5b c1       	rjmp	.+694    	; 0xb2c <__stack+0x6cd>
		}
		
		if( (poprzedni_guzik2 == 0) && (teraz_guzik2 == 1) )
		{
			eeprom_write_dword(&przebieg_ee, przebieg);
			ktora= 0;
     876:	61 2c       	mov	r6, r1
     878:	71 2c       	mov	r7, r1
				break;
			}
			
			case 4: // total distance
			{
				if(ktora < 200)
     87a:	28 ec       	ldi	r18, 0xC8	; 200
     87c:	62 16       	cp	r6, r18
     87e:	71 04       	cpc	r7, r1
     880:	b0 f4       	brcc	.+44     	; 0x8ae <__stack+0x44f>
				{
					cyfra(30);
     882:	8e e1       	ldi	r24, 0x1E	; 30
     884:	5c dc       	rcall	.-1864   	; 0x13e <cyfra>
					numercyfry(3);
     886:	83 e0       	ldi	r24, 0x03	; 3
     888:	b7 dc       	rcall	.-1682   	; 0x1f8 <numercyfry>
					my_delay(klatka);
     88a:	8c 85       	ldd	r24, Y+12	; 0x0c
     88c:	99 a1       	ldd	r25, Y+33	; 0x21
     88e:	d9 dc       	rcall	.-1614   	; 0x242 <my_delay>
					cyfra(25);
     890:	89 e1       	ldi	r24, 0x19	; 25
     892:	55 dc       	rcall	.-1878   	; 0x13e <cyfra>
					numercyfry(2);
     894:	82 e0       	ldi	r24, 0x02	; 2
     896:	b0 dc       	rcall	.-1696   	; 0x1f8 <numercyfry>
					my_delay(klatka);
     898:	8c 85       	ldd	r24, Y+12	; 0x0c
     89a:	99 a1       	ldd	r25, Y+33	; 0x21
     89c:	d2 dc       	rcall	.-1628   	; 0x242 <my_delay>
					cyfra(30);
     89e:	8e e1       	ldi	r24, 0x1E	; 30
     8a0:	4e dc       	rcall	.-1892   	; 0x13e <cyfra>
					numercyfry(1);
     8a2:	89 2d       	mov	r24, r9
     8a4:	a9 dc       	rcall	.-1710   	; 0x1f8 <numercyfry>
					my_delay(klatka);
     8a6:	8c 85       	ldd	r24, Y+12	; 0x0c
     8a8:	99 a1       	ldd	r25, Y+33	; 0x21
     8aa:	cb dc       	rcall	.-1642   	; 0x242 <my_delay>
     8ac:	3f c1       	rjmp	.+638    	; 0xb2c <__stack+0x6cd>
				}
				else if(przebieg*obwod < 100)
     8ae:	69 89       	ldd	r22, Y+17	; 0x11
     8b0:	7a 89       	ldd	r23, Y+18	; 0x12
     8b2:	8b 89       	ldd	r24, Y+19	; 0x13
     8b4:	9c 89       	ldd	r25, Y+20	; 0x14
     8b6:	44 d2       	rcall	.+1160   	; 0xd40 <__floatunsisf>
     8b8:	2f e1       	ldi	r18, 0x1F	; 31
     8ba:	35 e8       	ldi	r19, 0x85	; 133
     8bc:	4b e0       	ldi	r20, 0x0B	; 11
     8be:	50 e4       	ldi	r21, 0x40	; 64
     8c0:	f5 d2       	rcall	.+1514   	; 0xeac <__mulsf3>
     8c2:	5b 01       	movw	r10, r22
     8c4:	6c 01       	movw	r12, r24
     8c6:	20 e0       	ldi	r18, 0x00	; 0
     8c8:	30 e0       	ldi	r19, 0x00	; 0
     8ca:	48 ec       	ldi	r20, 0xC8	; 200
     8cc:	52 e4       	ldi	r21, 0x42	; 66
     8ce:	9b d1       	rcall	.+822    	; 0xc06 <__cmpsf2>
     8d0:	88 23       	and	r24, r24
     8d2:	84 f4       	brge	.+32     	; 0x8f4 <__stack+0x495>
				{
					liczba(przebieg*obwod*10, 2, klatka);
     8d4:	20 e0       	ldi	r18, 0x00	; 0
     8d6:	30 e0       	ldi	r19, 0x00	; 0
     8d8:	40 e2       	ldi	r20, 0x20	; 32
     8da:	51 e4       	ldi	r21, 0x41	; 65
     8dc:	c6 01       	movw	r24, r12
     8de:	b5 01       	movw	r22, r10
     8e0:	e5 d2       	rcall	.+1482   	; 0xeac <__mulsf3>
     8e2:	fd d1       	rcall	.+1018   	; 0xcde <__fixsfsi>
     8e4:	dc 01       	movw	r26, r24
     8e6:	cb 01       	movw	r24, r22
     8e8:	4c 85       	ldd	r20, Y+12	; 0x0c
     8ea:	59 a1       	ldd	r21, Y+33	; 0x21
     8ec:	62 e0       	ldi	r22, 0x02	; 2
     8ee:	70 e0       	ldi	r23, 0x00	; 0
     8f0:	b2 dc       	rcall	.-1692   	; 0x256 <liczba>
     8f2:	1c c1       	rjmp	.+568    	; 0xb2c <__stack+0x6cd>
				}
				else if(przebieg*obwod < 1000)
     8f4:	20 e0       	ldi	r18, 0x00	; 0
     8f6:	30 e0       	ldi	r19, 0x00	; 0
     8f8:	4a e7       	ldi	r20, 0x7A	; 122
     8fa:	54 e4       	ldi	r21, 0x44	; 68
     8fc:	c6 01       	movw	r24, r12
     8fe:	b5 01       	movw	r22, r10
     900:	82 d1       	rcall	.+772    	; 0xc06 <__cmpsf2>
     902:	88 23       	and	r24, r24
     904:	5c f4       	brge	.+22     	; 0x91c <__stack+0x4bd>
				{
					liczba(przebieg*obwod, 1, klatka);
     906:	c6 01       	movw	r24, r12
     908:	b5 01       	movw	r22, r10
     90a:	e9 d1       	rcall	.+978    	; 0xcde <__fixsfsi>
     90c:	dc 01       	movw	r26, r24
     90e:	cb 01       	movw	r24, r22
     910:	4c 85       	ldd	r20, Y+12	; 0x0c
     912:	59 a1       	ldd	r21, Y+33	; 0x21
     914:	61 e0       	ldi	r22, 0x01	; 1
     916:	70 e0       	ldi	r23, 0x00	; 0
     918:	9e dc       	rcall	.-1732   	; 0x256 <liczba>
     91a:	08 c1       	rjmp	.+528    	; 0xb2c <__stack+0x6cd>
				}
				else if(przebieg*obwod < 100000)
     91c:	20 e0       	ldi	r18, 0x00	; 0
     91e:	30 e5       	ldi	r19, 0x50	; 80
     920:	43 ec       	ldi	r20, 0xC3	; 195
     922:	57 e4       	ldi	r21, 0x47	; 71
     924:	c6 01       	movw	r24, r12
     926:	b5 01       	movw	r22, r10
     928:	6e d1       	rcall	.+732    	; 0xc06 <__cmpsf2>
     92a:	88 23       	and	r24, r24
     92c:	84 f4       	brge	.+32     	; 0x94e <__stack+0x4ef>
				{
					liczba(przebieg*obwod*0.01, 2, klatka);
     92e:	2a e0       	ldi	r18, 0x0A	; 10
     930:	37 ed       	ldi	r19, 0xD7	; 215
     932:	43 e2       	ldi	r20, 0x23	; 35
     934:	5c e3       	ldi	r21, 0x3C	; 60
     936:	c6 01       	movw	r24, r12
     938:	b5 01       	movw	r22, r10
     93a:	b8 d2       	rcall	.+1392   	; 0xeac <__mulsf3>
     93c:	d0 d1       	rcall	.+928    	; 0xcde <__fixsfsi>
     93e:	dc 01       	movw	r26, r24
     940:	cb 01       	movw	r24, r22
     942:	4c 85       	ldd	r20, Y+12	; 0x0c
     944:	59 a1       	ldd	r21, Y+33	; 0x21
     946:	62 e0       	ldi	r22, 0x02	; 2
     948:	70 e0       	ldi	r23, 0x00	; 0
     94a:	85 dc       	rcall	.-1782   	; 0x256 <liczba>
     94c:	ef c0       	rjmp	.+478    	; 0xb2c <__stack+0x6cd>
				}
				else
				{
					liczba(przebieg*obwod*0.001, 1, klatka);
     94e:	2f e6       	ldi	r18, 0x6F	; 111
     950:	32 e1       	ldi	r19, 0x12	; 18
     952:	43 e8       	ldi	r20, 0x83	; 131
     954:	5a e3       	ldi	r21, 0x3A	; 58
     956:	c6 01       	movw	r24, r12
     958:	b5 01       	movw	r22, r10
     95a:	a8 d2       	rcall	.+1360   	; 0xeac <__mulsf3>
     95c:	c0 d1       	rcall	.+896    	; 0xcde <__fixsfsi>
     95e:	dc 01       	movw	r26, r24
     960:	cb 01       	movw	r24, r22
     962:	4c 85       	ldd	r20, Y+12	; 0x0c
     964:	59 a1       	ldd	r21, Y+33	; 0x21
     966:	61 e0       	ldi	r22, 0x01	; 1
     968:	70 e0       	ldi	r23, 0x00	; 0
     96a:	75 dc       	rcall	.-1814   	; 0x256 <liczba>
     96c:	df c0       	rjmp	.+446    	; 0xb2c <__stack+0x6cd>
		}
		
		if( (poprzedni_guzik2 == 0) && (teraz_guzik2 == 1) )
		{
			eeprom_write_dword(&przebieg_ee, przebieg);
			ktora= 0;
     96e:	61 2c       	mov	r6, r1
     970:	71 2c       	mov	r7, r1
				break;
			}
			
			case 5: // temperature
			{
				if(ktora < 200)
     972:	38 ec       	ldi	r19, 0xC8	; 200
     974:	63 16       	cp	r6, r19
     976:	71 04       	cpc	r7, r1
     978:	b0 f4       	brcc	.+44     	; 0x9a6 <__stack+0x547>
				{
					cyfra(30);
     97a:	8e e1       	ldi	r24, 0x1E	; 30
     97c:	e0 db       	rcall	.-2112   	; 0x13e <cyfra>
					numercyfry(3);
     97e:	83 e0       	ldi	r24, 0x03	; 3
     980:	3b dc       	rcall	.-1930   	; 0x1f8 <numercyfry>
					my_delay(klatka);
     982:	8c 85       	ldd	r24, Y+12	; 0x0c
     984:	99 a1       	ldd	r25, Y+33	; 0x21
     986:	5d dc       	rcall	.-1862   	; 0x242 <my_delay>
					cyfra(15);
     988:	8f e0       	ldi	r24, 0x0F	; 15
     98a:	d9 db       	rcall	.-2126   	; 0x13e <cyfra>
					numercyfry(2);
     98c:	82 e0       	ldi	r24, 0x02	; 2
     98e:	34 dc       	rcall	.-1944   	; 0x1f8 <numercyfry>
					my_delay(klatka);
     990:	8c 85       	ldd	r24, Y+12	; 0x0c
     992:	99 a1       	ldd	r25, Y+33	; 0x21
     994:	56 dc       	rcall	.-1876   	; 0x242 <my_delay>
					cyfra(23);
     996:	87 e1       	ldi	r24, 0x17	; 23
     998:	d2 db       	rcall	.-2140   	; 0x13e <cyfra>
					numercyfry(1);
     99a:	89 2d       	mov	r24, r9
     99c:	2d dc       	rcall	.-1958   	; 0x1f8 <numercyfry>
					my_delay(klatka);
     99e:	8c 85       	ldd	r24, Y+12	; 0x0c
     9a0:	99 a1       	ldd	r25, Y+33	; 0x21
     9a2:	4f dc       	rcall	.-1890   	; 0x242 <my_delay>
     9a4:	c3 c0       	rjmp	.+390    	; 0xb2c <__stack+0x6cd>
		teraz_guzik0= !(PINC & 1);
		teraz_guzik1= !(PINC & 2);
		teraz_guzik2= !(PINC & 4);
		
		temperatura= (ADCL + (ADCH << 8));
		temperatura= temperatura*500/1024 -50;
     9a6:	8b 85       	ldd	r24, Y+11	; 0x0b
     9a8:	68 2f       	mov	r22, r24
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	76 2f       	mov	r23, r22
     9ae:	66 27       	eor	r22, r22
     9b0:	9a 85       	ldd	r25, Y+10	; 0x0a
     9b2:	69 0f       	add	r22, r25
     9b4:	71 1d       	adc	r23, r1
     9b6:	07 2e       	mov	r0, r23
     9b8:	00 0c       	add	r0, r0
     9ba:	88 0b       	sbc	r24, r24
     9bc:	99 0b       	sbc	r25, r25
     9be:	c2 d1       	rcall	.+900    	; 0xd44 <__floatsisf>
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	4a ef       	ldi	r20, 0xFA	; 250
     9c6:	53 e4       	ldi	r21, 0x43	; 67
     9c8:	71 d2       	rcall	.+1250   	; 0xeac <__mulsf3>
     9ca:	20 e0       	ldi	r18, 0x00	; 0
     9cc:	30 e0       	ldi	r19, 0x00	; 0
     9ce:	40 e8       	ldi	r20, 0x80	; 128
     9d0:	5a e3       	ldi	r21, 0x3A	; 58
     9d2:	6c d2       	rcall	.+1240   	; 0xeac <__mulsf3>
     9d4:	20 e0       	ldi	r18, 0x00	; 0
     9d6:	30 e0       	ldi	r19, 0x00	; 0
     9d8:	48 e4       	ldi	r20, 0x48	; 72
     9da:	52 e4       	ldi	r21, 0x42	; 66
     9dc:	af d0       	rcall	.+350    	; 0xb3c <__subsf3>
     9de:	5b 01       	movw	r10, r22
     9e0:	6c 01       	movw	r12, r24
					my_delay(klatka);
					cyfra(23);
					numercyfry(1);
					my_delay(klatka);
				}
				else if(temperatura < 10)
     9e2:	20 e0       	ldi	r18, 0x00	; 0
     9e4:	30 e0       	ldi	r19, 0x00	; 0
     9e6:	40 e2       	ldi	r20, 0x20	; 32
     9e8:	51 e4       	ldi	r21, 0x41	; 65
     9ea:	0d d1       	rcall	.+538    	; 0xc06 <__cmpsf2>
     9ec:	88 23       	and	r24, r24
     9ee:	84 f4       	brge	.+32     	; 0xa10 <__stack+0x5b1>
				{
					liczba(temperatura*100, 3, klatka);
     9f0:	20 e0       	ldi	r18, 0x00	; 0
     9f2:	30 e0       	ldi	r19, 0x00	; 0
     9f4:	48 ec       	ldi	r20, 0xC8	; 200
     9f6:	52 e4       	ldi	r21, 0x42	; 66
     9f8:	c6 01       	movw	r24, r12
     9fa:	b5 01       	movw	r22, r10
     9fc:	57 d2       	rcall	.+1198   	; 0xeac <__mulsf3>
     9fe:	6f d1       	rcall	.+734    	; 0xcde <__fixsfsi>
     a00:	dc 01       	movw	r26, r24
     a02:	cb 01       	movw	r24, r22
     a04:	4c 85       	ldd	r20, Y+12	; 0x0c
     a06:	59 a1       	ldd	r21, Y+33	; 0x21
     a08:	63 e0       	ldi	r22, 0x03	; 3
     a0a:	70 e0       	ldi	r23, 0x00	; 0
     a0c:	24 dc       	rcall	.-1976   	; 0x256 <liczba>
     a0e:	8e c0       	rjmp	.+284    	; 0xb2c <__stack+0x6cd>
				}
				else if(temperatura < 100)
     a10:	20 e0       	ldi	r18, 0x00	; 0
     a12:	30 e0       	ldi	r19, 0x00	; 0
     a14:	48 ec       	ldi	r20, 0xC8	; 200
     a16:	52 e4       	ldi	r21, 0x42	; 66
     a18:	c6 01       	movw	r24, r12
     a1a:	b5 01       	movw	r22, r10
     a1c:	f4 d0       	rcall	.+488    	; 0xc06 <__cmpsf2>
     a1e:	88 23       	and	r24, r24
     a20:	84 f4       	brge	.+32     	; 0xa42 <__stack+0x5e3>
				{
					liczba(temperatura*10, 2, klatka);
     a22:	20 e0       	ldi	r18, 0x00	; 0
     a24:	30 e0       	ldi	r19, 0x00	; 0
     a26:	40 e2       	ldi	r20, 0x20	; 32
     a28:	51 e4       	ldi	r21, 0x41	; 65
     a2a:	c6 01       	movw	r24, r12
     a2c:	b5 01       	movw	r22, r10
     a2e:	3e d2       	rcall	.+1148   	; 0xeac <__mulsf3>
     a30:	56 d1       	rcall	.+684    	; 0xcde <__fixsfsi>
     a32:	dc 01       	movw	r26, r24
     a34:	cb 01       	movw	r24, r22
     a36:	4c 85       	ldd	r20, Y+12	; 0x0c
     a38:	59 a1       	ldd	r21, Y+33	; 0x21
     a3a:	62 e0       	ldi	r22, 0x02	; 2
     a3c:	70 e0       	ldi	r23, 0x00	; 0
     a3e:	0b dc       	rcall	.-2026   	; 0x256 <liczba>
     a40:	75 c0       	rjmp	.+234    	; 0xb2c <__stack+0x6cd>
				}
				else
				{
					liczba(temperatura, 1, klatka);
     a42:	c6 01       	movw	r24, r12
     a44:	b5 01       	movw	r22, r10
     a46:	4b d1       	rcall	.+662    	; 0xcde <__fixsfsi>
     a48:	dc 01       	movw	r26, r24
     a4a:	cb 01       	movw	r24, r22
     a4c:	4c 85       	ldd	r20, Y+12	; 0x0c
     a4e:	59 a1       	ldd	r21, Y+33	; 0x21
     a50:	61 e0       	ldi	r22, 0x01	; 1
     a52:	70 e0       	ldi	r23, 0x00	; 0
     a54:	00 dc       	rcall	.-2048   	; 0x256 <liczba>
     a56:	6a c0       	rjmp	.+212    	; 0xb2c <__stack+0x6cd>
		}
		
		if( (poprzedni_guzik2 == 0) && (teraz_guzik2 == 1) )
		{
			eeprom_write_dword(&przebieg_ee, przebieg);
			ktora= 0;
     a58:	61 2c       	mov	r6, r1
     a5a:	71 2c       	mov	r7, r1
				break;
			}
			
			case 6: // rpms
			{
				if(ktora < 200)
     a5c:	a8 ec       	ldi	r26, 0xC8	; 200
     a5e:	6a 16       	cp	r6, r26
     a60:	71 04       	cpc	r7, r1
     a62:	b0 f4       	brcc	.+44     	; 0xa90 <__stack+0x631>
				{
					cyfra(28);
     a64:	8c e1       	ldi	r24, 0x1C	; 28
     a66:	6b db       	rcall	.-2346   	; 0x13e <cyfra>
					numercyfry(3);
     a68:	83 e0       	ldi	r24, 0x03	; 3
     a6a:	c6 db       	rcall	.-2164   	; 0x1f8 <numercyfry>
					my_delay(klatka);
     a6c:	8c 85       	ldd	r24, Y+12	; 0x0c
     a6e:	99 a1       	ldd	r25, Y+33	; 0x21
     a70:	e8 db       	rcall	.-2096   	; 0x242 <my_delay>
					cyfra(26);
     a72:	8a e1       	ldi	r24, 0x1A	; 26
     a74:	64 db       	rcall	.-2360   	; 0x13e <cyfra>
					numercyfry(2);
     a76:	82 e0       	ldi	r24, 0x02	; 2
     a78:	bf db       	rcall	.-2178   	; 0x1f8 <numercyfry>
					my_delay(klatka);
     a7a:	8c 85       	ldd	r24, Y+12	; 0x0c
     a7c:	99 a1       	ldd	r25, Y+33	; 0x21
     a7e:	e1 db       	rcall	.-2110   	; 0x242 <my_delay>
					cyfra(23);
     a80:	87 e1       	ldi	r24, 0x17	; 23
     a82:	5d db       	rcall	.-2374   	; 0x13e <cyfra>
					numercyfry(1);
     a84:	89 2d       	mov	r24, r9
     a86:	b8 db       	rcall	.-2192   	; 0x1f8 <numercyfry>
					my_delay(klatka);
     a88:	8c 85       	ldd	r24, Y+12	; 0x0c
     a8a:	99 a1       	ldd	r25, Y+33	; 0x21
     a8c:	da db       	rcall	.-2124   	; 0x242 <my_delay>
     a8e:	4e c0       	rjmp	.+156    	; 0xb2c <__stack+0x6cd>
				}
				else if(rpm < 10)
     a90:	20 e0       	ldi	r18, 0x00	; 0
     a92:	30 e0       	ldi	r19, 0x00	; 0
     a94:	40 e2       	ldi	r20, 0x20	; 32
     a96:	51 e4       	ldi	r21, 0x41	; 65
     a98:	6e 81       	ldd	r22, Y+6	; 0x06
     a9a:	7f 81       	ldd	r23, Y+7	; 0x07
     a9c:	88 85       	ldd	r24, Y+8	; 0x08
     a9e:	99 85       	ldd	r25, Y+9	; 0x09
     aa0:	b2 d0       	rcall	.+356    	; 0xc06 <__cmpsf2>
     aa2:	88 23       	and	r24, r24
     aa4:	94 f4       	brge	.+36     	; 0xaca <__stack+0x66b>
				{
					liczba(rpm*100, 3, klatka);
     aa6:	20 e0       	ldi	r18, 0x00	; 0
     aa8:	30 e0       	ldi	r19, 0x00	; 0
     aaa:	48 ec       	ldi	r20, 0xC8	; 200
     aac:	52 e4       	ldi	r21, 0x42	; 66
     aae:	6e 81       	ldd	r22, Y+6	; 0x06
     ab0:	7f 81       	ldd	r23, Y+7	; 0x07
     ab2:	88 85       	ldd	r24, Y+8	; 0x08
     ab4:	99 85       	ldd	r25, Y+9	; 0x09
     ab6:	fa d1       	rcall	.+1012   	; 0xeac <__mulsf3>
     ab8:	12 d1       	rcall	.+548    	; 0xcde <__fixsfsi>
     aba:	dc 01       	movw	r26, r24
     abc:	cb 01       	movw	r24, r22
     abe:	4c 85       	ldd	r20, Y+12	; 0x0c
     ac0:	59 a1       	ldd	r21, Y+33	; 0x21
     ac2:	63 e0       	ldi	r22, 0x03	; 3
     ac4:	70 e0       	ldi	r23, 0x00	; 0
     ac6:	c7 db       	rcall	.-2162   	; 0x256 <liczba>
     ac8:	31 c0       	rjmp	.+98     	; 0xb2c <__stack+0x6cd>
				}
				else if(rpm < 100)
     aca:	20 e0       	ldi	r18, 0x00	; 0
     acc:	30 e0       	ldi	r19, 0x00	; 0
     ace:	48 ec       	ldi	r20, 0xC8	; 200
     ad0:	52 e4       	ldi	r21, 0x42	; 66
     ad2:	6e 81       	ldd	r22, Y+6	; 0x06
     ad4:	7f 81       	ldd	r23, Y+7	; 0x07
     ad6:	88 85       	ldd	r24, Y+8	; 0x08
     ad8:	99 85       	ldd	r25, Y+9	; 0x09
     ada:	95 d0       	rcall	.+298    	; 0xc06 <__cmpsf2>
     adc:	88 23       	and	r24, r24
     ade:	94 f4       	brge	.+36     	; 0xb04 <__stack+0x6a5>
				{
					liczba(rpm*10, 2, klatka);
     ae0:	20 e0       	ldi	r18, 0x00	; 0
     ae2:	30 e0       	ldi	r19, 0x00	; 0
     ae4:	40 e2       	ldi	r20, 0x20	; 32
     ae6:	51 e4       	ldi	r21, 0x41	; 65
     ae8:	6e 81       	ldd	r22, Y+6	; 0x06
     aea:	7f 81       	ldd	r23, Y+7	; 0x07
     aec:	88 85       	ldd	r24, Y+8	; 0x08
     aee:	99 85       	ldd	r25, Y+9	; 0x09
     af0:	dd d1       	rcall	.+954    	; 0xeac <__mulsf3>
     af2:	f5 d0       	rcall	.+490    	; 0xcde <__fixsfsi>
     af4:	dc 01       	movw	r26, r24
     af6:	cb 01       	movw	r24, r22
     af8:	4c 85       	ldd	r20, Y+12	; 0x0c
     afa:	59 a1       	ldd	r21, Y+33	; 0x21
     afc:	62 e0       	ldi	r22, 0x02	; 2
     afe:	70 e0       	ldi	r23, 0x00	; 0
     b00:	aa db       	rcall	.-2220   	; 0x256 <liczba>
     b02:	14 c0       	rjmp	.+40     	; 0xb2c <__stack+0x6cd>
				}
				else
				{
					liczba(rpm, 1, klatka);
     b04:	6e 81       	ldd	r22, Y+6	; 0x06
     b06:	7f 81       	ldd	r23, Y+7	; 0x07
     b08:	88 85       	ldd	r24, Y+8	; 0x08
     b0a:	99 85       	ldd	r25, Y+9	; 0x09
     b0c:	e8 d0       	rcall	.+464    	; 0xcde <__fixsfsi>
     b0e:	dc 01       	movw	r26, r24
     b10:	cb 01       	movw	r24, r22
     b12:	4c 85       	ldd	r20, Y+12	; 0x0c
     b14:	59 a1       	ldd	r21, Y+33	; 0x21
     b16:	61 e0       	ldi	r22, 0x01	; 1
     b18:	70 e0       	ldi	r23, 0x00	; 0
     b1a:	9d db       	rcall	.-2246   	; 0x256 <liczba>
     b1c:	07 c0       	rjmp	.+14     	; 0xb2c <__stack+0x6cd>
		}
		
		if( (poprzedni_guzik2 == 0) && (teraz_guzik2 == 1) )
		{
			eeprom_write_dword(&przebieg_ee, przebieg);
			ktora= 0;
     b1e:	61 2c       	mov	r6, r1
     b20:	71 2c       	mov	r7, r1
				break;
			}
			
			case 48: // switch off
			{
				numercyfry(0);
     b22:	80 e0       	ldi	r24, 0x00	; 0
     b24:	69 db       	rcall	.-2350   	; 0x1f8 <numercyfry>
				break;
     b26:	02 c0       	rjmp	.+4      	; 0xb2c <__stack+0x6cd>
		}
		
		if( (poprzedni_guzik2 == 0) && (teraz_guzik2 == 1) )
		{
			eeprom_write_dword(&przebieg_ee, przebieg);
			ktora= 0;
     b28:	61 2c       	mov	r6, r1
     b2a:	71 2c       	mov	r7, r1
				numercyfry(0);
				break;
			}
		}
		
		ktora= ktora + 1;
     b2c:	bf ef       	ldi	r27, 0xFF	; 255
     b2e:	6b 1a       	sub	r6, r27
     b30:	7b 0a       	sbc	r7, r27
		
		poprzedni= teraz;
     b32:	29 81       	ldd	r18, Y+1	; 0x01
		poprzedni_guzik0= teraz_guzik0;
     b34:	52 2c       	mov	r5, r2
		poprzedni_guzik1= teraz_guzik1;
     b36:	48 2c       	mov	r4, r8
		poprzedni_guzik2= teraz_guzik2;
     b38:	30 2e       	mov	r3, r16
	}	
     b3a:	01 cc       	rjmp	.-2046   	; 0x33e <main+0x8e>

00000b3c <__subsf3>:
     b3c:	50 58       	subi	r21, 0x80	; 128

00000b3e <__addsf3>:
     b3e:	bb 27       	eor	r27, r27
     b40:	aa 27       	eor	r26, r26
     b42:	0e d0       	rcall	.+28     	; 0xb60 <__addsf3x>
     b44:	75 c1       	rjmp	.+746    	; 0xe30 <__fp_round>
     b46:	66 d1       	rcall	.+716    	; 0xe14 <__fp_pscA>
     b48:	30 f0       	brcs	.+12     	; 0xb56 <__addsf3+0x18>
     b4a:	6b d1       	rcall	.+726    	; 0xe22 <__fp_pscB>
     b4c:	20 f0       	brcs	.+8      	; 0xb56 <__addsf3+0x18>
     b4e:	31 f4       	brne	.+12     	; 0xb5c <__addsf3+0x1e>
     b50:	9f 3f       	cpi	r25, 0xFF	; 255
     b52:	11 f4       	brne	.+4      	; 0xb58 <__addsf3+0x1a>
     b54:	1e f4       	brtc	.+6      	; 0xb5c <__addsf3+0x1e>
     b56:	5b c1       	rjmp	.+694    	; 0xe0e <__fp_nan>
     b58:	0e f4       	brtc	.+2      	; 0xb5c <__addsf3+0x1e>
     b5a:	e0 95       	com	r30
     b5c:	e7 fb       	bst	r30, 7
     b5e:	51 c1       	rjmp	.+674    	; 0xe02 <__fp_inf>

00000b60 <__addsf3x>:
     b60:	e9 2f       	mov	r30, r25
     b62:	77 d1       	rcall	.+750    	; 0xe52 <__fp_split3>
     b64:	80 f3       	brcs	.-32     	; 0xb46 <__addsf3+0x8>
     b66:	ba 17       	cp	r27, r26
     b68:	62 07       	cpc	r22, r18
     b6a:	73 07       	cpc	r23, r19
     b6c:	84 07       	cpc	r24, r20
     b6e:	95 07       	cpc	r25, r21
     b70:	18 f0       	brcs	.+6      	; 0xb78 <__addsf3x+0x18>
     b72:	71 f4       	brne	.+28     	; 0xb90 <__addsf3x+0x30>
     b74:	9e f5       	brtc	.+102    	; 0xbdc <__addsf3x+0x7c>
     b76:	8f c1       	rjmp	.+798    	; 0xe96 <__fp_zero>
     b78:	0e f4       	brtc	.+2      	; 0xb7c <__addsf3x+0x1c>
     b7a:	e0 95       	com	r30
     b7c:	0b 2e       	mov	r0, r27
     b7e:	ba 2f       	mov	r27, r26
     b80:	a0 2d       	mov	r26, r0
     b82:	0b 01       	movw	r0, r22
     b84:	b9 01       	movw	r22, r18
     b86:	90 01       	movw	r18, r0
     b88:	0c 01       	movw	r0, r24
     b8a:	ca 01       	movw	r24, r20
     b8c:	a0 01       	movw	r20, r0
     b8e:	11 24       	eor	r1, r1
     b90:	ff 27       	eor	r31, r31
     b92:	59 1b       	sub	r21, r25
     b94:	99 f0       	breq	.+38     	; 0xbbc <__addsf3x+0x5c>
     b96:	59 3f       	cpi	r21, 0xF9	; 249
     b98:	50 f4       	brcc	.+20     	; 0xbae <__addsf3x+0x4e>
     b9a:	50 3e       	cpi	r21, 0xE0	; 224
     b9c:	68 f1       	brcs	.+90     	; 0xbf8 <__addsf3x+0x98>
     b9e:	1a 16       	cp	r1, r26
     ba0:	f0 40       	sbci	r31, 0x00	; 0
     ba2:	a2 2f       	mov	r26, r18
     ba4:	23 2f       	mov	r18, r19
     ba6:	34 2f       	mov	r19, r20
     ba8:	44 27       	eor	r20, r20
     baa:	58 5f       	subi	r21, 0xF8	; 248
     bac:	f3 cf       	rjmp	.-26     	; 0xb94 <__addsf3x+0x34>
     bae:	46 95       	lsr	r20
     bb0:	37 95       	ror	r19
     bb2:	27 95       	ror	r18
     bb4:	a7 95       	ror	r26
     bb6:	f0 40       	sbci	r31, 0x00	; 0
     bb8:	53 95       	inc	r21
     bba:	c9 f7       	brne	.-14     	; 0xbae <__addsf3x+0x4e>
     bbc:	7e f4       	brtc	.+30     	; 0xbdc <__addsf3x+0x7c>
     bbe:	1f 16       	cp	r1, r31
     bc0:	ba 0b       	sbc	r27, r26
     bc2:	62 0b       	sbc	r22, r18
     bc4:	73 0b       	sbc	r23, r19
     bc6:	84 0b       	sbc	r24, r20
     bc8:	ba f0       	brmi	.+46     	; 0xbf8 <__addsf3x+0x98>
     bca:	91 50       	subi	r25, 0x01	; 1
     bcc:	a1 f0       	breq	.+40     	; 0xbf6 <__addsf3x+0x96>
     bce:	ff 0f       	add	r31, r31
     bd0:	bb 1f       	adc	r27, r27
     bd2:	66 1f       	adc	r22, r22
     bd4:	77 1f       	adc	r23, r23
     bd6:	88 1f       	adc	r24, r24
     bd8:	c2 f7       	brpl	.-16     	; 0xbca <__addsf3x+0x6a>
     bda:	0e c0       	rjmp	.+28     	; 0xbf8 <__addsf3x+0x98>
     bdc:	ba 0f       	add	r27, r26
     bde:	62 1f       	adc	r22, r18
     be0:	73 1f       	adc	r23, r19
     be2:	84 1f       	adc	r24, r20
     be4:	48 f4       	brcc	.+18     	; 0xbf8 <__addsf3x+0x98>
     be6:	87 95       	ror	r24
     be8:	77 95       	ror	r23
     bea:	67 95       	ror	r22
     bec:	b7 95       	ror	r27
     bee:	f7 95       	ror	r31
     bf0:	9e 3f       	cpi	r25, 0xFE	; 254
     bf2:	08 f0       	brcs	.+2      	; 0xbf6 <__addsf3x+0x96>
     bf4:	b3 cf       	rjmp	.-154    	; 0xb5c <__addsf3+0x1e>
     bf6:	93 95       	inc	r25
     bf8:	88 0f       	add	r24, r24
     bfa:	08 f0       	brcs	.+2      	; 0xbfe <__addsf3x+0x9e>
     bfc:	99 27       	eor	r25, r25
     bfe:	ee 0f       	add	r30, r30
     c00:	97 95       	ror	r25
     c02:	87 95       	ror	r24
     c04:	08 95       	ret

00000c06 <__cmpsf2>:
     c06:	d9 d0       	rcall	.+434    	; 0xdba <__fp_cmp>
     c08:	08 f4       	brcc	.+2      	; 0xc0c <__cmpsf2+0x6>
     c0a:	81 e0       	ldi	r24, 0x01	; 1
     c0c:	08 95       	ret

00000c0e <__divsf3>:
     c0e:	0c d0       	rcall	.+24     	; 0xc28 <__divsf3x>
     c10:	0f c1       	rjmp	.+542    	; 0xe30 <__fp_round>
     c12:	07 d1       	rcall	.+526    	; 0xe22 <__fp_pscB>
     c14:	40 f0       	brcs	.+16     	; 0xc26 <__divsf3+0x18>
     c16:	fe d0       	rcall	.+508    	; 0xe14 <__fp_pscA>
     c18:	30 f0       	brcs	.+12     	; 0xc26 <__divsf3+0x18>
     c1a:	21 f4       	brne	.+8      	; 0xc24 <__divsf3+0x16>
     c1c:	5f 3f       	cpi	r21, 0xFF	; 255
     c1e:	19 f0       	breq	.+6      	; 0xc26 <__divsf3+0x18>
     c20:	f0 c0       	rjmp	.+480    	; 0xe02 <__fp_inf>
     c22:	51 11       	cpse	r21, r1
     c24:	39 c1       	rjmp	.+626    	; 0xe98 <__fp_szero>
     c26:	f3 c0       	rjmp	.+486    	; 0xe0e <__fp_nan>

00000c28 <__divsf3x>:
     c28:	14 d1       	rcall	.+552    	; 0xe52 <__fp_split3>
     c2a:	98 f3       	brcs	.-26     	; 0xc12 <__divsf3+0x4>

00000c2c <__divsf3_pse>:
     c2c:	99 23       	and	r25, r25
     c2e:	c9 f3       	breq	.-14     	; 0xc22 <__divsf3+0x14>
     c30:	55 23       	and	r21, r21
     c32:	b1 f3       	breq	.-20     	; 0xc20 <__divsf3+0x12>
     c34:	95 1b       	sub	r25, r21
     c36:	55 0b       	sbc	r21, r21
     c38:	bb 27       	eor	r27, r27
     c3a:	aa 27       	eor	r26, r26
     c3c:	62 17       	cp	r22, r18
     c3e:	73 07       	cpc	r23, r19
     c40:	84 07       	cpc	r24, r20
     c42:	38 f0       	brcs	.+14     	; 0xc52 <__divsf3_pse+0x26>
     c44:	9f 5f       	subi	r25, 0xFF	; 255
     c46:	5f 4f       	sbci	r21, 0xFF	; 255
     c48:	22 0f       	add	r18, r18
     c4a:	33 1f       	adc	r19, r19
     c4c:	44 1f       	adc	r20, r20
     c4e:	aa 1f       	adc	r26, r26
     c50:	a9 f3       	breq	.-22     	; 0xc3c <__divsf3_pse+0x10>
     c52:	33 d0       	rcall	.+102    	; 0xcba <__divsf3_pse+0x8e>
     c54:	0e 2e       	mov	r0, r30
     c56:	3a f0       	brmi	.+14     	; 0xc66 <__divsf3_pse+0x3a>
     c58:	e0 e8       	ldi	r30, 0x80	; 128
     c5a:	30 d0       	rcall	.+96     	; 0xcbc <__divsf3_pse+0x90>
     c5c:	91 50       	subi	r25, 0x01	; 1
     c5e:	50 40       	sbci	r21, 0x00	; 0
     c60:	e6 95       	lsr	r30
     c62:	00 1c       	adc	r0, r0
     c64:	ca f7       	brpl	.-14     	; 0xc58 <__divsf3_pse+0x2c>
     c66:	29 d0       	rcall	.+82     	; 0xcba <__divsf3_pse+0x8e>
     c68:	fe 2f       	mov	r31, r30
     c6a:	27 d0       	rcall	.+78     	; 0xcba <__divsf3_pse+0x8e>
     c6c:	66 0f       	add	r22, r22
     c6e:	77 1f       	adc	r23, r23
     c70:	88 1f       	adc	r24, r24
     c72:	bb 1f       	adc	r27, r27
     c74:	26 17       	cp	r18, r22
     c76:	37 07       	cpc	r19, r23
     c78:	48 07       	cpc	r20, r24
     c7a:	ab 07       	cpc	r26, r27
     c7c:	b0 e8       	ldi	r27, 0x80	; 128
     c7e:	09 f0       	breq	.+2      	; 0xc82 <__divsf3_pse+0x56>
     c80:	bb 0b       	sbc	r27, r27
     c82:	80 2d       	mov	r24, r0
     c84:	bf 01       	movw	r22, r30
     c86:	ff 27       	eor	r31, r31
     c88:	93 58       	subi	r25, 0x83	; 131
     c8a:	5f 4f       	sbci	r21, 0xFF	; 255
     c8c:	2a f0       	brmi	.+10     	; 0xc98 <__divsf3_pse+0x6c>
     c8e:	9e 3f       	cpi	r25, 0xFE	; 254
     c90:	51 05       	cpc	r21, r1
     c92:	68 f0       	brcs	.+26     	; 0xcae <__divsf3_pse+0x82>
     c94:	b6 c0       	rjmp	.+364    	; 0xe02 <__fp_inf>
     c96:	00 c1       	rjmp	.+512    	; 0xe98 <__fp_szero>
     c98:	5f 3f       	cpi	r21, 0xFF	; 255
     c9a:	ec f3       	brlt	.-6      	; 0xc96 <__divsf3_pse+0x6a>
     c9c:	98 3e       	cpi	r25, 0xE8	; 232
     c9e:	dc f3       	brlt	.-10     	; 0xc96 <__divsf3_pse+0x6a>
     ca0:	86 95       	lsr	r24
     ca2:	77 95       	ror	r23
     ca4:	67 95       	ror	r22
     ca6:	b7 95       	ror	r27
     ca8:	f7 95       	ror	r31
     caa:	9f 5f       	subi	r25, 0xFF	; 255
     cac:	c9 f7       	brne	.-14     	; 0xca0 <__divsf3_pse+0x74>
     cae:	88 0f       	add	r24, r24
     cb0:	91 1d       	adc	r25, r1
     cb2:	96 95       	lsr	r25
     cb4:	87 95       	ror	r24
     cb6:	97 f9       	bld	r25, 7
     cb8:	08 95       	ret
     cba:	e1 e0       	ldi	r30, 0x01	; 1
     cbc:	66 0f       	add	r22, r22
     cbe:	77 1f       	adc	r23, r23
     cc0:	88 1f       	adc	r24, r24
     cc2:	bb 1f       	adc	r27, r27
     cc4:	62 17       	cp	r22, r18
     cc6:	73 07       	cpc	r23, r19
     cc8:	84 07       	cpc	r24, r20
     cca:	ba 07       	cpc	r27, r26
     ccc:	20 f0       	brcs	.+8      	; 0xcd6 <__divsf3_pse+0xaa>
     cce:	62 1b       	sub	r22, r18
     cd0:	73 0b       	sbc	r23, r19
     cd2:	84 0b       	sbc	r24, r20
     cd4:	ba 0b       	sbc	r27, r26
     cd6:	ee 1f       	adc	r30, r30
     cd8:	88 f7       	brcc	.-30     	; 0xcbc <__divsf3_pse+0x90>
     cda:	e0 95       	com	r30
     cdc:	08 95       	ret

00000cde <__fixsfsi>:
     cde:	04 d0       	rcall	.+8      	; 0xce8 <__fixunssfsi>
     ce0:	68 94       	set
     ce2:	b1 11       	cpse	r27, r1
     ce4:	d9 c0       	rjmp	.+434    	; 0xe98 <__fp_szero>
     ce6:	08 95       	ret

00000ce8 <__fixunssfsi>:
     ce8:	bc d0       	rcall	.+376    	; 0xe62 <__fp_splitA>
     cea:	88 f0       	brcs	.+34     	; 0xd0e <__fixunssfsi+0x26>
     cec:	9f 57       	subi	r25, 0x7F	; 127
     cee:	90 f0       	brcs	.+36     	; 0xd14 <__fixunssfsi+0x2c>
     cf0:	b9 2f       	mov	r27, r25
     cf2:	99 27       	eor	r25, r25
     cf4:	b7 51       	subi	r27, 0x17	; 23
     cf6:	a0 f0       	brcs	.+40     	; 0xd20 <__fixunssfsi+0x38>
     cf8:	d1 f0       	breq	.+52     	; 0xd2e <__fixunssfsi+0x46>
     cfa:	66 0f       	add	r22, r22
     cfc:	77 1f       	adc	r23, r23
     cfe:	88 1f       	adc	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	1a f0       	brmi	.+6      	; 0xd0a <__fixunssfsi+0x22>
     d04:	ba 95       	dec	r27
     d06:	c9 f7       	brne	.-14     	; 0xcfa <__fixunssfsi+0x12>
     d08:	12 c0       	rjmp	.+36     	; 0xd2e <__fixunssfsi+0x46>
     d0a:	b1 30       	cpi	r27, 0x01	; 1
     d0c:	81 f0       	breq	.+32     	; 0xd2e <__fixunssfsi+0x46>
     d0e:	c3 d0       	rcall	.+390    	; 0xe96 <__fp_zero>
     d10:	b1 e0       	ldi	r27, 0x01	; 1
     d12:	08 95       	ret
     d14:	c0 c0       	rjmp	.+384    	; 0xe96 <__fp_zero>
     d16:	67 2f       	mov	r22, r23
     d18:	78 2f       	mov	r23, r24
     d1a:	88 27       	eor	r24, r24
     d1c:	b8 5f       	subi	r27, 0xF8	; 248
     d1e:	39 f0       	breq	.+14     	; 0xd2e <__fixunssfsi+0x46>
     d20:	b9 3f       	cpi	r27, 0xF9	; 249
     d22:	cc f3       	brlt	.-14     	; 0xd16 <__fixunssfsi+0x2e>
     d24:	86 95       	lsr	r24
     d26:	77 95       	ror	r23
     d28:	67 95       	ror	r22
     d2a:	b3 95       	inc	r27
     d2c:	d9 f7       	brne	.-10     	; 0xd24 <__fixunssfsi+0x3c>
     d2e:	3e f4       	brtc	.+14     	; 0xd3e <__fixunssfsi+0x56>
     d30:	90 95       	com	r25
     d32:	80 95       	com	r24
     d34:	70 95       	com	r23
     d36:	61 95       	neg	r22
     d38:	7f 4f       	sbci	r23, 0xFF	; 255
     d3a:	8f 4f       	sbci	r24, 0xFF	; 255
     d3c:	9f 4f       	sbci	r25, 0xFF	; 255
     d3e:	08 95       	ret

00000d40 <__floatunsisf>:
     d40:	e8 94       	clt
     d42:	09 c0       	rjmp	.+18     	; 0xd56 <__floatsisf+0x12>

00000d44 <__floatsisf>:
     d44:	97 fb       	bst	r25, 7
     d46:	3e f4       	brtc	.+14     	; 0xd56 <__floatsisf+0x12>
     d48:	90 95       	com	r25
     d4a:	80 95       	com	r24
     d4c:	70 95       	com	r23
     d4e:	61 95       	neg	r22
     d50:	7f 4f       	sbci	r23, 0xFF	; 255
     d52:	8f 4f       	sbci	r24, 0xFF	; 255
     d54:	9f 4f       	sbci	r25, 0xFF	; 255
     d56:	99 23       	and	r25, r25
     d58:	a9 f0       	breq	.+42     	; 0xd84 <__floatsisf+0x40>
     d5a:	f9 2f       	mov	r31, r25
     d5c:	96 e9       	ldi	r25, 0x96	; 150
     d5e:	bb 27       	eor	r27, r27
     d60:	93 95       	inc	r25
     d62:	f6 95       	lsr	r31
     d64:	87 95       	ror	r24
     d66:	77 95       	ror	r23
     d68:	67 95       	ror	r22
     d6a:	b7 95       	ror	r27
     d6c:	f1 11       	cpse	r31, r1
     d6e:	f8 cf       	rjmp	.-16     	; 0xd60 <__floatsisf+0x1c>
     d70:	fa f4       	brpl	.+62     	; 0xdb0 <__floatsisf+0x6c>
     d72:	bb 0f       	add	r27, r27
     d74:	11 f4       	brne	.+4      	; 0xd7a <__floatsisf+0x36>
     d76:	60 ff       	sbrs	r22, 0
     d78:	1b c0       	rjmp	.+54     	; 0xdb0 <__floatsisf+0x6c>
     d7a:	6f 5f       	subi	r22, 0xFF	; 255
     d7c:	7f 4f       	sbci	r23, 0xFF	; 255
     d7e:	8f 4f       	sbci	r24, 0xFF	; 255
     d80:	9f 4f       	sbci	r25, 0xFF	; 255
     d82:	16 c0       	rjmp	.+44     	; 0xdb0 <__floatsisf+0x6c>
     d84:	88 23       	and	r24, r24
     d86:	11 f0       	breq	.+4      	; 0xd8c <__floatsisf+0x48>
     d88:	96 e9       	ldi	r25, 0x96	; 150
     d8a:	11 c0       	rjmp	.+34     	; 0xdae <__floatsisf+0x6a>
     d8c:	77 23       	and	r23, r23
     d8e:	21 f0       	breq	.+8      	; 0xd98 <__floatsisf+0x54>
     d90:	9e e8       	ldi	r25, 0x8E	; 142
     d92:	87 2f       	mov	r24, r23
     d94:	76 2f       	mov	r23, r22
     d96:	05 c0       	rjmp	.+10     	; 0xda2 <__floatsisf+0x5e>
     d98:	66 23       	and	r22, r22
     d9a:	71 f0       	breq	.+28     	; 0xdb8 <__floatsisf+0x74>
     d9c:	96 e8       	ldi	r25, 0x86	; 134
     d9e:	86 2f       	mov	r24, r22
     da0:	70 e0       	ldi	r23, 0x00	; 0
     da2:	60 e0       	ldi	r22, 0x00	; 0
     da4:	2a f0       	brmi	.+10     	; 0xdb0 <__floatsisf+0x6c>
     da6:	9a 95       	dec	r25
     da8:	66 0f       	add	r22, r22
     daa:	77 1f       	adc	r23, r23
     dac:	88 1f       	adc	r24, r24
     dae:	da f7       	brpl	.-10     	; 0xda6 <__floatsisf+0x62>
     db0:	88 0f       	add	r24, r24
     db2:	96 95       	lsr	r25
     db4:	87 95       	ror	r24
     db6:	97 f9       	bld	r25, 7
     db8:	08 95       	ret

00000dba <__fp_cmp>:
     dba:	99 0f       	add	r25, r25
     dbc:	00 08       	sbc	r0, r0
     dbe:	55 0f       	add	r21, r21
     dc0:	aa 0b       	sbc	r26, r26
     dc2:	e0 e8       	ldi	r30, 0x80	; 128
     dc4:	fe ef       	ldi	r31, 0xFE	; 254
     dc6:	16 16       	cp	r1, r22
     dc8:	17 06       	cpc	r1, r23
     dca:	e8 07       	cpc	r30, r24
     dcc:	f9 07       	cpc	r31, r25
     dce:	c0 f0       	brcs	.+48     	; 0xe00 <__fp_cmp+0x46>
     dd0:	12 16       	cp	r1, r18
     dd2:	13 06       	cpc	r1, r19
     dd4:	e4 07       	cpc	r30, r20
     dd6:	f5 07       	cpc	r31, r21
     dd8:	98 f0       	brcs	.+38     	; 0xe00 <__fp_cmp+0x46>
     dda:	62 1b       	sub	r22, r18
     ddc:	73 0b       	sbc	r23, r19
     dde:	84 0b       	sbc	r24, r20
     de0:	95 0b       	sbc	r25, r21
     de2:	39 f4       	brne	.+14     	; 0xdf2 <__fp_cmp+0x38>
     de4:	0a 26       	eor	r0, r26
     de6:	61 f0       	breq	.+24     	; 0xe00 <__fp_cmp+0x46>
     de8:	23 2b       	or	r18, r19
     dea:	24 2b       	or	r18, r20
     dec:	25 2b       	or	r18, r21
     dee:	21 f4       	brne	.+8      	; 0xdf8 <__fp_cmp+0x3e>
     df0:	08 95       	ret
     df2:	0a 26       	eor	r0, r26
     df4:	09 f4       	brne	.+2      	; 0xdf8 <__fp_cmp+0x3e>
     df6:	a1 40       	sbci	r26, 0x01	; 1
     df8:	a6 95       	lsr	r26
     dfa:	8f ef       	ldi	r24, 0xFF	; 255
     dfc:	81 1d       	adc	r24, r1
     dfe:	81 1d       	adc	r24, r1
     e00:	08 95       	ret

00000e02 <__fp_inf>:
     e02:	97 f9       	bld	r25, 7
     e04:	9f 67       	ori	r25, 0x7F	; 127
     e06:	80 e8       	ldi	r24, 0x80	; 128
     e08:	70 e0       	ldi	r23, 0x00	; 0
     e0a:	60 e0       	ldi	r22, 0x00	; 0
     e0c:	08 95       	ret

00000e0e <__fp_nan>:
     e0e:	9f ef       	ldi	r25, 0xFF	; 255
     e10:	80 ec       	ldi	r24, 0xC0	; 192
     e12:	08 95       	ret

00000e14 <__fp_pscA>:
     e14:	00 24       	eor	r0, r0
     e16:	0a 94       	dec	r0
     e18:	16 16       	cp	r1, r22
     e1a:	17 06       	cpc	r1, r23
     e1c:	18 06       	cpc	r1, r24
     e1e:	09 06       	cpc	r0, r25
     e20:	08 95       	ret

00000e22 <__fp_pscB>:
     e22:	00 24       	eor	r0, r0
     e24:	0a 94       	dec	r0
     e26:	12 16       	cp	r1, r18
     e28:	13 06       	cpc	r1, r19
     e2a:	14 06       	cpc	r1, r20
     e2c:	05 06       	cpc	r0, r21
     e2e:	08 95       	ret

00000e30 <__fp_round>:
     e30:	09 2e       	mov	r0, r25
     e32:	03 94       	inc	r0
     e34:	00 0c       	add	r0, r0
     e36:	11 f4       	brne	.+4      	; 0xe3c <__fp_round+0xc>
     e38:	88 23       	and	r24, r24
     e3a:	52 f0       	brmi	.+20     	; 0xe50 <__fp_round+0x20>
     e3c:	bb 0f       	add	r27, r27
     e3e:	40 f4       	brcc	.+16     	; 0xe50 <__fp_round+0x20>
     e40:	bf 2b       	or	r27, r31
     e42:	11 f4       	brne	.+4      	; 0xe48 <__fp_round+0x18>
     e44:	60 ff       	sbrs	r22, 0
     e46:	04 c0       	rjmp	.+8      	; 0xe50 <__fp_round+0x20>
     e48:	6f 5f       	subi	r22, 0xFF	; 255
     e4a:	7f 4f       	sbci	r23, 0xFF	; 255
     e4c:	8f 4f       	sbci	r24, 0xFF	; 255
     e4e:	9f 4f       	sbci	r25, 0xFF	; 255
     e50:	08 95       	ret

00000e52 <__fp_split3>:
     e52:	57 fd       	sbrc	r21, 7
     e54:	90 58       	subi	r25, 0x80	; 128
     e56:	44 0f       	add	r20, r20
     e58:	55 1f       	adc	r21, r21
     e5a:	59 f0       	breq	.+22     	; 0xe72 <__fp_splitA+0x10>
     e5c:	5f 3f       	cpi	r21, 0xFF	; 255
     e5e:	71 f0       	breq	.+28     	; 0xe7c <__fp_splitA+0x1a>
     e60:	47 95       	ror	r20

00000e62 <__fp_splitA>:
     e62:	88 0f       	add	r24, r24
     e64:	97 fb       	bst	r25, 7
     e66:	99 1f       	adc	r25, r25
     e68:	61 f0       	breq	.+24     	; 0xe82 <__fp_splitA+0x20>
     e6a:	9f 3f       	cpi	r25, 0xFF	; 255
     e6c:	79 f0       	breq	.+30     	; 0xe8c <__fp_splitA+0x2a>
     e6e:	87 95       	ror	r24
     e70:	08 95       	ret
     e72:	12 16       	cp	r1, r18
     e74:	13 06       	cpc	r1, r19
     e76:	14 06       	cpc	r1, r20
     e78:	55 1f       	adc	r21, r21
     e7a:	f2 cf       	rjmp	.-28     	; 0xe60 <__fp_split3+0xe>
     e7c:	46 95       	lsr	r20
     e7e:	f1 df       	rcall	.-30     	; 0xe62 <__fp_splitA>
     e80:	08 c0       	rjmp	.+16     	; 0xe92 <__fp_splitA+0x30>
     e82:	16 16       	cp	r1, r22
     e84:	17 06       	cpc	r1, r23
     e86:	18 06       	cpc	r1, r24
     e88:	99 1f       	adc	r25, r25
     e8a:	f1 cf       	rjmp	.-30     	; 0xe6e <__fp_splitA+0xc>
     e8c:	86 95       	lsr	r24
     e8e:	71 05       	cpc	r23, r1
     e90:	61 05       	cpc	r22, r1
     e92:	08 94       	sec
     e94:	08 95       	ret

00000e96 <__fp_zero>:
     e96:	e8 94       	clt

00000e98 <__fp_szero>:
     e98:	bb 27       	eor	r27, r27
     e9a:	66 27       	eor	r22, r22
     e9c:	77 27       	eor	r23, r23
     e9e:	cb 01       	movw	r24, r22
     ea0:	97 f9       	bld	r25, 7
     ea2:	08 95       	ret

00000ea4 <__gesf2>:
     ea4:	8a df       	rcall	.-236    	; 0xdba <__fp_cmp>
     ea6:	08 f4       	brcc	.+2      	; 0xeaa <__gesf2+0x6>
     ea8:	8f ef       	ldi	r24, 0xFF	; 255
     eaa:	08 95       	ret

00000eac <__mulsf3>:
     eac:	0b d0       	rcall	.+22     	; 0xec4 <__mulsf3x>
     eae:	c0 cf       	rjmp	.-128    	; 0xe30 <__fp_round>
     eb0:	b1 df       	rcall	.-158    	; 0xe14 <__fp_pscA>
     eb2:	28 f0       	brcs	.+10     	; 0xebe <__mulsf3+0x12>
     eb4:	b6 df       	rcall	.-148    	; 0xe22 <__fp_pscB>
     eb6:	18 f0       	brcs	.+6      	; 0xebe <__mulsf3+0x12>
     eb8:	95 23       	and	r25, r21
     eba:	09 f0       	breq	.+2      	; 0xebe <__mulsf3+0x12>
     ebc:	a2 cf       	rjmp	.-188    	; 0xe02 <__fp_inf>
     ebe:	a7 cf       	rjmp	.-178    	; 0xe0e <__fp_nan>
     ec0:	11 24       	eor	r1, r1
     ec2:	ea cf       	rjmp	.-44     	; 0xe98 <__fp_szero>

00000ec4 <__mulsf3x>:
     ec4:	c6 df       	rcall	.-116    	; 0xe52 <__fp_split3>
     ec6:	a0 f3       	brcs	.-24     	; 0xeb0 <__mulsf3+0x4>

00000ec8 <__mulsf3_pse>:
     ec8:	95 9f       	mul	r25, r21
     eca:	d1 f3       	breq	.-12     	; 0xec0 <__mulsf3+0x14>
     ecc:	95 0f       	add	r25, r21
     ece:	50 e0       	ldi	r21, 0x00	; 0
     ed0:	55 1f       	adc	r21, r21
     ed2:	62 9f       	mul	r22, r18
     ed4:	f0 01       	movw	r30, r0
     ed6:	72 9f       	mul	r23, r18
     ed8:	bb 27       	eor	r27, r27
     eda:	f0 0d       	add	r31, r0
     edc:	b1 1d       	adc	r27, r1
     ede:	63 9f       	mul	r22, r19
     ee0:	aa 27       	eor	r26, r26
     ee2:	f0 0d       	add	r31, r0
     ee4:	b1 1d       	adc	r27, r1
     ee6:	aa 1f       	adc	r26, r26
     ee8:	64 9f       	mul	r22, r20
     eea:	66 27       	eor	r22, r22
     eec:	b0 0d       	add	r27, r0
     eee:	a1 1d       	adc	r26, r1
     ef0:	66 1f       	adc	r22, r22
     ef2:	82 9f       	mul	r24, r18
     ef4:	22 27       	eor	r18, r18
     ef6:	b0 0d       	add	r27, r0
     ef8:	a1 1d       	adc	r26, r1
     efa:	62 1f       	adc	r22, r18
     efc:	73 9f       	mul	r23, r19
     efe:	b0 0d       	add	r27, r0
     f00:	a1 1d       	adc	r26, r1
     f02:	62 1f       	adc	r22, r18
     f04:	83 9f       	mul	r24, r19
     f06:	a0 0d       	add	r26, r0
     f08:	61 1d       	adc	r22, r1
     f0a:	22 1f       	adc	r18, r18
     f0c:	74 9f       	mul	r23, r20
     f0e:	33 27       	eor	r19, r19
     f10:	a0 0d       	add	r26, r0
     f12:	61 1d       	adc	r22, r1
     f14:	23 1f       	adc	r18, r19
     f16:	84 9f       	mul	r24, r20
     f18:	60 0d       	add	r22, r0
     f1a:	21 1d       	adc	r18, r1
     f1c:	82 2f       	mov	r24, r18
     f1e:	76 2f       	mov	r23, r22
     f20:	6a 2f       	mov	r22, r26
     f22:	11 24       	eor	r1, r1
     f24:	9f 57       	subi	r25, 0x7F	; 127
     f26:	50 40       	sbci	r21, 0x00	; 0
     f28:	8a f0       	brmi	.+34     	; 0xf4c <__mulsf3_pse+0x84>
     f2a:	e1 f0       	breq	.+56     	; 0xf64 <__mulsf3_pse+0x9c>
     f2c:	88 23       	and	r24, r24
     f2e:	4a f0       	brmi	.+18     	; 0xf42 <__mulsf3_pse+0x7a>
     f30:	ee 0f       	add	r30, r30
     f32:	ff 1f       	adc	r31, r31
     f34:	bb 1f       	adc	r27, r27
     f36:	66 1f       	adc	r22, r22
     f38:	77 1f       	adc	r23, r23
     f3a:	88 1f       	adc	r24, r24
     f3c:	91 50       	subi	r25, 0x01	; 1
     f3e:	50 40       	sbci	r21, 0x00	; 0
     f40:	a9 f7       	brne	.-22     	; 0xf2c <__mulsf3_pse+0x64>
     f42:	9e 3f       	cpi	r25, 0xFE	; 254
     f44:	51 05       	cpc	r21, r1
     f46:	70 f0       	brcs	.+28     	; 0xf64 <__mulsf3_pse+0x9c>
     f48:	5c cf       	rjmp	.-328    	; 0xe02 <__fp_inf>
     f4a:	a6 cf       	rjmp	.-180    	; 0xe98 <__fp_szero>
     f4c:	5f 3f       	cpi	r21, 0xFF	; 255
     f4e:	ec f3       	brlt	.-6      	; 0xf4a <__mulsf3_pse+0x82>
     f50:	98 3e       	cpi	r25, 0xE8	; 232
     f52:	dc f3       	brlt	.-10     	; 0xf4a <__mulsf3_pse+0x82>
     f54:	86 95       	lsr	r24
     f56:	77 95       	ror	r23
     f58:	67 95       	ror	r22
     f5a:	b7 95       	ror	r27
     f5c:	f7 95       	ror	r31
     f5e:	e7 95       	ror	r30
     f60:	9f 5f       	subi	r25, 0xFF	; 255
     f62:	c1 f7       	brne	.-16     	; 0xf54 <__mulsf3_pse+0x8c>
     f64:	fe 2b       	or	r31, r30
     f66:	88 0f       	add	r24, r24
     f68:	91 1d       	adc	r25, r1
     f6a:	96 95       	lsr	r25
     f6c:	87 95       	ror	r24
     f6e:	97 f9       	bld	r25, 7
     f70:	08 95       	ret

00000f72 <__divmodhi4>:
     f72:	97 fb       	bst	r25, 7
     f74:	07 2e       	mov	r0, r23
     f76:	16 f4       	brtc	.+4      	; 0xf7c <__divmodhi4+0xa>
     f78:	00 94       	com	r0
     f7a:	06 d0       	rcall	.+12     	; 0xf88 <__divmodhi4_neg1>
     f7c:	77 fd       	sbrc	r23, 7
     f7e:	08 d0       	rcall	.+16     	; 0xf90 <__divmodhi4_neg2>
     f80:	0b d0       	rcall	.+22     	; 0xf98 <__udivmodhi4>
     f82:	07 fc       	sbrc	r0, 7
     f84:	05 d0       	rcall	.+10     	; 0xf90 <__divmodhi4_neg2>
     f86:	3e f4       	brtc	.+14     	; 0xf96 <__divmodhi4_exit>

00000f88 <__divmodhi4_neg1>:
     f88:	90 95       	com	r25
     f8a:	81 95       	neg	r24
     f8c:	9f 4f       	sbci	r25, 0xFF	; 255
     f8e:	08 95       	ret

00000f90 <__divmodhi4_neg2>:
     f90:	70 95       	com	r23
     f92:	61 95       	neg	r22
     f94:	7f 4f       	sbci	r23, 0xFF	; 255

00000f96 <__divmodhi4_exit>:
     f96:	08 95       	ret

00000f98 <__udivmodhi4>:
     f98:	aa 1b       	sub	r26, r26
     f9a:	bb 1b       	sub	r27, r27
     f9c:	51 e1       	ldi	r21, 0x11	; 17
     f9e:	07 c0       	rjmp	.+14     	; 0xfae <__udivmodhi4_ep>

00000fa0 <__udivmodhi4_loop>:
     fa0:	aa 1f       	adc	r26, r26
     fa2:	bb 1f       	adc	r27, r27
     fa4:	a6 17       	cp	r26, r22
     fa6:	b7 07       	cpc	r27, r23
     fa8:	10 f0       	brcs	.+4      	; 0xfae <__udivmodhi4_ep>
     faa:	a6 1b       	sub	r26, r22
     fac:	b7 0b       	sbc	r27, r23

00000fae <__udivmodhi4_ep>:
     fae:	88 1f       	adc	r24, r24
     fb0:	99 1f       	adc	r25, r25
     fb2:	5a 95       	dec	r21
     fb4:	a9 f7       	brne	.-22     	; 0xfa0 <__udivmodhi4_loop>
     fb6:	80 95       	com	r24
     fb8:	90 95       	com	r25
     fba:	bc 01       	movw	r22, r24
     fbc:	cd 01       	movw	r24, r26
     fbe:	08 95       	ret

00000fc0 <eeprom_read_dword>:
     fc0:	a6 e1       	ldi	r26, 0x16	; 22
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	44 e0       	ldi	r20, 0x04	; 4
     fc6:	50 e0       	ldi	r21, 0x00	; 0
     fc8:	0a c0       	rjmp	.+20     	; 0xfde <eeprom_read_blraw>

00000fca <eeprom_write_dword>:
     fca:	24 2f       	mov	r18, r20
     fcc:	17 d0       	rcall	.+46     	; 0xffc <eeprom_write_r18>
     fce:	25 2f       	mov	r18, r21
     fd0:	15 d0       	rcall	.+42     	; 0xffc <eeprom_write_r18>
     fd2:	00 c0       	rjmp	.+0      	; 0xfd4 <eeprom_write_word>

00000fd4 <eeprom_write_word>:
     fd4:	12 d0       	rcall	.+36     	; 0xffa <eeprom_write_byte>
     fd6:	27 2f       	mov	r18, r23
     fd8:	11 c0       	rjmp	.+34     	; 0xffc <eeprom_write_r18>

00000fda <eeprom_read_block>:
     fda:	dc 01       	movw	r26, r24
     fdc:	cb 01       	movw	r24, r22

00000fde <eeprom_read_blraw>:
     fde:	fc 01       	movw	r30, r24
     fe0:	e1 99       	sbic	0x1c, 1	; 28
     fe2:	fe cf       	rjmp	.-4      	; 0xfe0 <eeprom_read_blraw+0x2>
     fe4:	06 c0       	rjmp	.+12     	; 0xff2 <eeprom_read_blraw+0x14>
     fe6:	ff bb       	out	0x1f, r31	; 31
     fe8:	ee bb       	out	0x1e, r30	; 30
     fea:	e0 9a       	sbi	0x1c, 0	; 28
     fec:	31 96       	adiw	r30, 0x01	; 1
     fee:	0d b2       	in	r0, 0x1d	; 29
     ff0:	0d 92       	st	X+, r0
     ff2:	41 50       	subi	r20, 0x01	; 1
     ff4:	50 40       	sbci	r21, 0x00	; 0
     ff6:	b8 f7       	brcc	.-18     	; 0xfe6 <eeprom_read_blraw+0x8>
     ff8:	08 95       	ret

00000ffa <eeprom_write_byte>:
     ffa:	26 2f       	mov	r18, r22

00000ffc <eeprom_write_r18>:
     ffc:	e1 99       	sbic	0x1c, 1	; 28
     ffe:	fe cf       	rjmp	.-4      	; 0xffc <eeprom_write_r18>
    1000:	9f bb       	out	0x1f, r25	; 31
    1002:	8e bb       	out	0x1e, r24	; 30
    1004:	2d bb       	out	0x1d, r18	; 29
    1006:	0f b6       	in	r0, 0x3f	; 63
    1008:	f8 94       	cli
    100a:	e2 9a       	sbi	0x1c, 2	; 28
    100c:	e1 9a       	sbi	0x1c, 1	; 28
    100e:	0f be       	out	0x3f, r0	; 63
    1010:	01 96       	adiw	r24, 0x01	; 1
    1012:	08 95       	ret

00001014 <_exit>:
    1014:	f8 94       	cli

00001016 <__stop_program>:
    1016:	ff cf       	rjmp	.-2      	; 0x1016 <__stop_program>
